<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="5915"><g><title>dpll::dpll::backtrack (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0169%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0169%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (10 samples, 0.17%)</title><rect x="0.0169%" y="293" width="0.1691%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="10"/><text x="0.2669%" y="303.50"></text></g><g><title>[[heap]] (14 samples, 0.24%)</title><rect x="0.0000%" y="309" width="0.2367%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="14"/><text x="0.2500%" y="319.50"></text></g><g><title>dpll::dpll::set_variable (3 samples, 0.05%)</title><rect x="0.1860%" y="293" width="0.0507%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="3"/><text x="0.4360%" y="303.50"></text></g><g><title>dpll::dpll::find_unit (40 samples, 0.68%)</title><rect x="0.2367%" y="293" width="0.6762%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="40"/><text x="0.4867%" y="303.50"></text></g><g><title>[[stack]] (59 samples, 1.00%)</title><rect x="0.2367%" y="309" width="0.9975%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="59"/><text x="0.4867%" y="319.50"></text></g><g><title>dpll::dpll::undo_assignment (19 samples, 0.32%)</title><rect x="0.9129%" y="293" width="0.3212%" height="15" fill="rgb(228,23,34)" fg:x="54" fg:w="19"/><text x="1.1629%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.12%)</title><rect x="1.2342%" y="309" width="0.1183%" height="15" fill="rgb(218,30,26)" fg:x="73" fg:w="7"/><text x="1.4842%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="1.3187%" y="293" width="0.0338%" height="15" fill="rgb(220,122,19)" fg:x="78" fg:w="2"/><text x="1.5687%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="1.3187%" y="277" width="0.0338%" height="15" fill="rgb(250,228,42)" fg:x="78" fg:w="2"/><text x="1.5687%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="1.3187%" y="261" width="0.0338%" height="15" fill="rgb(240,193,28)" fg:x="78" fg:w="2"/><text x="1.5687%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3356%" y="245" width="0.0169%" height="15" fill="rgb(216,20,37)" fg:x="79" fg:w="1"/><text x="1.5856%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3356%" y="229" width="0.0169%" height="15" fill="rgb(206,188,39)" fg:x="79" fg:w="1"/><text x="1.5856%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3356%" y="213" width="0.0169%" height="15" fill="rgb(217,207,13)" fg:x="79" fg:w="1"/><text x="1.5856%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3356%" y="197" width="0.0169%" height="15" fill="rgb(231,73,38)" fg:x="79" fg:w="1"/><text x="1.5856%" y="207.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3356%" y="181" width="0.0169%" height="15" fill="rgb(225,20,46)" fg:x="79" fg:w="1"/><text x="1.5856%" y="191.50"></text></g><g><title>[dpll] (6 samples, 0.10%)</title><rect x="1.3525%" y="293" width="0.1014%" height="15" fill="rgb(210,31,41)" fg:x="80" fg:w="6"/><text x="1.6025%" y="303.50"></text></g><g><title>dpll::dpll::set_variable (6 samples, 0.10%)</title><rect x="1.3525%" y="277" width="0.1014%" height="15" fill="rgb(221,200,47)" fg:x="80" fg:w="6"/><text x="1.6025%" y="287.50"></text></g><g><title>dpll::dpll::backtrack (7 samples, 0.12%)</title><rect x="1.4539%" y="293" width="0.1183%" height="15" fill="rgb(226,26,5)" fg:x="86" fg:w="7"/><text x="1.7039%" y="303.50"></text></g><g><title>dpll::dpll::set_variable_false (13 samples, 0.22%)</title><rect x="1.6230%" y="277" width="0.2198%" height="15" fill="rgb(249,33,26)" fg:x="96" fg:w="13"/><text x="1.8730%" y="287.50"></text></g><g><title>dpll::dpll::dpll (30 samples, 0.51%)</title><rect x="1.5723%" y="293" width="0.5072%" height="15" fill="rgb(235,183,28)" fg:x="93" fg:w="30"/><text x="1.8223%" y="303.50"></text></g><g><title>dpll::dpll::set_variable_true (14 samples, 0.24%)</title><rect x="1.8428%" y="277" width="0.2367%" height="15" fill="rgb(221,5,38)" fg:x="109" fg:w="14"/><text x="2.0928%" y="287.50"></text></g><g><title>dpll::dpll::set_variable (105 samples, 1.78%)</title><rect x="2.0795%" y="293" width="1.7751%" height="15" fill="rgb(247,18,42)" fg:x="123" fg:w="105"/><text x="2.3295%" y="303.50">d..</text></g><g><title>[unknown] (174 samples, 2.94%)</title><rect x="1.3525%" y="309" width="2.9417%" height="15" fill="rgb(241,131,45)" fg:x="80" fg:w="174"/><text x="1.6025%" y="319.50">[u..</text></g><g><title>dpll::dpll::undo_assignment (26 samples, 0.44%)</title><rect x="3.8546%" y="293" width="0.4396%" height="15" fill="rgb(249,31,29)" fg:x="228" fg:w="26"/><text x="4.1046%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.12%)</title><rect x="9.5689%" y="149" width="0.1183%" height="15" fill="rgb(225,111,53)" fg:x="566" fg:w="7"/><text x="9.8189%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (7 samples, 0.12%)</title><rect x="9.5689%" y="133" width="0.1183%" height="15" fill="rgb(238,160,17)" fg:x="566" fg:w="7"/><text x="9.8189%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (7 samples, 0.12%)</title><rect x="9.5689%" y="117" width="0.1183%" height="15" fill="rgb(214,148,48)" fg:x="566" fg:w="7"/><text x="9.8189%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (37 samples, 0.63%)</title><rect x="9.6872%" y="149" width="0.6255%" height="15" fill="rgb(232,36,49)" fg:x="573" fg:w="37"/><text x="9.9372%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (37 samples, 0.63%)</title><rect x="9.6872%" y="133" width="0.6255%" height="15" fill="rgb(209,103,24)" fg:x="573" fg:w="37"/><text x="9.9372%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.63%)</title><rect x="9.6872%" y="117" width="0.6255%" height="15" fill="rgb(229,88,8)" fg:x="573" fg:w="37"/><text x="9.9372%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="11.3609%" y="117" width="0.0338%" height="15" fill="rgb(213,181,19)" fg:x="672" fg:w="2"/><text x="11.6109%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="11.3609%" y="101" width="0.0338%" height="15" fill="rgb(254,191,54)" fg:x="672" fg:w="2"/><text x="11.6109%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (5 samples, 0.08%)</title><rect x="11.3609%" y="133" width="0.0845%" height="15" fill="rgb(241,83,37)" fg:x="672" fg:w="5"/><text x="11.6109%" y="143.50"></text></g><g><title>core::ptr::read (3 samples, 0.05%)</title><rect x="11.3948%" y="117" width="0.0507%" height="15" fill="rgb(233,36,39)" fg:x="674" fg:w="3"/><text x="11.6448%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (7 samples, 0.12%)</title><rect x="11.4455%" y="133" width="0.1183%" height="15" fill="rgb(226,3,54)" fg:x="677" fg:w="7"/><text x="11.6955%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (62 samples, 1.05%)</title><rect x="11.5638%" y="101" width="1.0482%" height="15" fill="rgb(245,192,40)" fg:x="684" fg:w="62"/><text x="11.8138%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (138 samples, 2.33%)</title><rect x="10.3128%" y="149" width="2.3331%" height="15" fill="rgb(238,167,29)" fg:x="610" fg:w="138"/><text x="10.5628%" y="159.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (64 samples, 1.08%)</title><rect x="11.5638%" y="133" width="1.0820%" height="15" fill="rgb(232,182,51)" fg:x="684" fg:w="64"/><text x="11.8138%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (64 samples, 1.08%)</title><rect x="11.5638%" y="117" width="1.0820%" height="15" fill="rgb(231,60,39)" fg:x="684" fg:w="64"/><text x="11.8138%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2 samples, 0.03%)</title><rect x="12.6120%" y="101" width="0.0338%" height="15" fill="rgb(208,69,12)" fg:x="746" fg:w="2"/><text x="12.8620%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (246 samples, 4.16%)</title><rect x="12.6458%" y="149" width="4.1589%" height="15" fill="rgb(235,93,37)" fg:x="748" fg:w="246"/><text x="12.8958%" y="159.50">core:..</text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (246 samples, 4.16%)</title><rect x="12.6458%" y="133" width="4.1589%" height="15" fill="rgb(213,116,39)" fg:x="748" fg:w="246"/><text x="12.8958%" y="143.50">&lt;dpll..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (21 samples, 0.36%)</title><rect x="16.8047%" y="149" width="0.3550%" height="15" fill="rgb(222,207,29)" fg:x="994" fg:w="21"/><text x="17.0547%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.03%)</title><rect x="17.1598%" y="149" width="0.0338%" height="15" fill="rgb(206,96,30)" fg:x="1015" fg:w="2"/><text x="17.4098%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="17.1598%" y="133" width="0.0338%" height="15" fill="rgb(218,138,4)" fg:x="1015" fg:w="2"/><text x="17.4098%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (3 samples, 0.05%)</title><rect x="18.2925%" y="133" width="0.0507%" height="15" fill="rgb(250,191,14)" fg:x="1082" fg:w="3"/><text x="18.5425%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (1 samples, 0.02%)</title><rect x="18.3263%" y="117" width="0.0169%" height="15" fill="rgb(239,60,40)" fg:x="1084" fg:w="1"/><text x="18.5763%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (14 samples, 0.24%)</title><rect x="18.7997%" y="117" width="0.2367%" height="15" fill="rgb(206,27,48)" fg:x="1112" fg:w="14"/><text x="19.0497%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (14 samples, 0.24%)</title><rect x="18.7997%" y="101" width="0.2367%" height="15" fill="rgb(225,35,8)" fg:x="1112" fg:w="14"/><text x="19.0497%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.05%)</title><rect x="19.0363%" y="117" width="0.0507%" height="15" fill="rgb(250,213,24)" fg:x="1126" fg:w="3"/><text x="19.2863%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (66 samples, 1.12%)</title><rect x="18.3432%" y="133" width="1.1158%" height="15" fill="rgb(247,123,22)" fg:x="1085" fg:w="66"/><text x="18.5932%" y="143.50"></text></g><g><title>core::ptr::read (22 samples, 0.37%)</title><rect x="19.0871%" y="117" width="0.3719%" height="15" fill="rgb(231,138,38)" fg:x="1129" fg:w="22"/><text x="19.3371%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::le (119 samples, 2.01%)</title><rect x="19.4590%" y="133" width="2.0118%" height="15" fill="rgb(231,145,46)" fg:x="1151" fg:w="119"/><text x="19.7090%" y="143.50">c..</text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (69 samples, 1.17%)</title><rect x="20.3043%" y="117" width="1.1665%" height="15" fill="rgb(251,118,11)" fg:x="1201" fg:w="69"/><text x="20.5543%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (69 samples, 1.17%)</title><rect x="20.3043%" y="101" width="1.1665%" height="15" fill="rgb(217,147,25)" fg:x="1201" fg:w="69"/><text x="20.5543%" y="111.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="23.4996%" y="117" width="0.0169%" height="15" fill="rgb(247,81,37)" fg:x="1390" fg:w="1"/><text x="23.7496%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.02%)</title><rect x="23.4996%" y="101" width="0.0169%" height="15" fill="rgb(209,12,38)" fg:x="1390" fg:w="1"/><text x="23.7496%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="23.4996%" y="85" width="0.0169%" height="15" fill="rgb(227,1,9)" fg:x="1390" fg:w="1"/><text x="23.7496%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="23.4996%" y="69" width="0.0169%" height="15" fill="rgb(248,47,43)" fg:x="1390" fg:w="1"/><text x="23.7496%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="23.5165%" y="117" width="0.0169%" height="15" fill="rgb(221,10,30)" fg:x="1391" fg:w="1"/><text x="23.7665%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="23.5165%" y="101" width="0.0169%" height="15" fill="rgb(210,229,1)" fg:x="1391" fg:w="1"/><text x="23.7665%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="23.5165%" y="85" width="0.0169%" height="15" fill="rgb(222,148,37)" fg:x="1391" fg:w="1"/><text x="23.7665%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (8 samples, 0.14%)</title><rect x="23.5334%" y="117" width="0.1352%" height="15" fill="rgb(234,67,33)" fg:x="1392" fg:w="8"/><text x="23.7834%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.14%)</title><rect x="23.5334%" y="101" width="0.1352%" height="15" fill="rgb(247,98,35)" fg:x="1392" fg:w="8"/><text x="23.7834%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.14%)</title><rect x="23.5334%" y="85" width="0.1352%" height="15" fill="rgb(247,138,52)" fg:x="1392" fg:w="8"/><text x="23.7834%" y="95.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.42%)</title><rect x="23.6686%" y="117" width="0.4227%" height="15" fill="rgb(213,79,30)" fg:x="1400" fg:w="25"/><text x="23.9186%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.27%)</title><rect x="23.8208%" y="101" width="0.2705%" height="15" fill="rgb(246,177,23)" fg:x="1409" fg:w="16"/><text x="24.0708%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (4 samples, 0.07%)</title><rect x="24.1589%" y="101" width="0.0676%" height="15" fill="rgb(230,62,27)" fg:x="1429" fg:w="4"/><text x="24.4089%" y="111.50"></text></g><g><title>core::ptr::write (4 samples, 0.07%)</title><rect x="24.1589%" y="85" width="0.0676%" height="15" fill="rgb(216,154,8)" fg:x="1429" fg:w="4"/><text x="24.4089%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (2 samples, 0.03%)</title><rect x="24.2265%" y="101" width="0.0338%" height="15" fill="rgb(244,35,45)" fg:x="1433" fg:w="2"/><text x="24.4765%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (2 samples, 0.03%)</title><rect x="24.2265%" y="85" width="0.0338%" height="15" fill="rgb(251,115,12)" fg:x="1433" fg:w="2"/><text x="24.4765%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.03%)</title><rect x="24.2265%" y="69" width="0.0338%" height="15" fill="rgb(240,54,50)" fg:x="1433" fg:w="2"/><text x="24.4765%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (4 samples, 0.07%)</title><rect x="24.2604%" y="69" width="0.0676%" height="15" fill="rgb(233,84,52)" fg:x="1435" fg:w="4"/><text x="24.5104%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (16 samples, 0.27%)</title><rect x="24.0913%" y="117" width="0.2705%" height="15" fill="rgb(207,117,47)" fg:x="1425" fg:w="16"/><text x="24.3413%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (6 samples, 0.10%)</title><rect x="24.2604%" y="101" width="0.1014%" height="15" fill="rgb(249,43,39)" fg:x="1435" fg:w="6"/><text x="24.5104%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (6 samples, 0.10%)</title><rect x="24.2604%" y="85" width="0.1014%" height="15" fill="rgb(209,38,44)" fg:x="1435" fg:w="6"/><text x="24.5104%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2 samples, 0.03%)</title><rect x="24.3280%" y="69" width="0.0338%" height="15" fill="rgb(236,212,23)" fg:x="1439" fg:w="2"/><text x="24.5780%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.05%)</title><rect x="24.3618%" y="117" width="0.0507%" height="15" fill="rgb(242,79,21)" fg:x="1441" fg:w="3"/><text x="24.6118%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::le (15 samples, 0.25%)</title><rect x="24.4125%" y="117" width="0.2536%" height="15" fill="rgb(211,96,35)" fg:x="1444" fg:w="15"/><text x="24.6625%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (12 samples, 0.20%)</title><rect x="24.4632%" y="101" width="0.2029%" height="15" fill="rgb(253,215,40)" fg:x="1447" fg:w="12"/><text x="24.7132%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (12 samples, 0.20%)</title><rect x="24.4632%" y="85" width="0.2029%" height="15" fill="rgb(211,81,21)" fg:x="1447" fg:w="12"/><text x="24.7132%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.07%)</title><rect x="24.8521%" y="101" width="0.0676%" height="15" fill="rgb(208,190,38)" fg:x="1470" fg:w="4"/><text x="25.1021%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.05%)</title><rect x="24.8690%" y="85" width="0.0507%" height="15" fill="rgb(235,213,38)" fg:x="1471" fg:w="3"/><text x="25.1190%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.05%)</title><rect x="24.8690%" y="69" width="0.0507%" height="15" fill="rgb(237,122,38)" fg:x="1471" fg:w="3"/><text x="25.1190%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="25.1902%" y="85" width="0.0676%" height="15" fill="rgb(244,218,35)" fg:x="1490" fg:w="4"/><text x="25.4402%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.07%)</title><rect x="25.1902%" y="69" width="0.0676%" height="15" fill="rgb(240,68,47)" fg:x="1490" fg:w="4"/><text x="25.4402%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="25.4438%" y="69" width="0.0169%" height="15" fill="rgb(210,16,53)" fg:x="1505" fg:w="1"/><text x="25.6938%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="25.4438%" y="53" width="0.0169%" height="15" fill="rgb(235,124,12)" fg:x="1505" fg:w="1"/><text x="25.6938%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="25.4438%" y="37" width="0.0169%" height="15" fill="rgb(224,169,11)" fg:x="1505" fg:w="1"/><text x="25.6938%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (8 samples, 0.14%)</title><rect x="25.4607%" y="69" width="0.1352%" height="15" fill="rgb(250,166,2)" fg:x="1506" fg:w="8"/><text x="25.7107%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (44 samples, 0.74%)</title><rect x="24.9197%" y="101" width="0.7439%" height="15" fill="rgb(242,216,29)" fg:x="1474" fg:w="44"/><text x="25.1697%" y="111.50"></text></g><g><title>dpll::dpll::find_unit::_{{closure}} (24 samples, 0.41%)</title><rect x="25.2578%" y="85" width="0.4057%" height="15" fill="rgb(230,116,27)" fg:x="1494" fg:w="24"/><text x="25.5078%" y="95.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (4 samples, 0.07%)</title><rect x="25.5959%" y="69" width="0.0676%" height="15" fill="rgb(228,99,48)" fg:x="1514" fg:w="4"/><text x="25.8459%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (18 samples, 0.30%)</title><rect x="25.6636%" y="101" width="0.3043%" height="15" fill="rgb(253,11,6)" fg:x="1518" fg:w="18"/><text x="25.9136%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (13 samples, 0.22%)</title><rect x="25.7481%" y="85" width="0.2198%" height="15" fill="rgb(247,143,39)" fg:x="1523" fg:w="13"/><text x="25.9981%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (13 samples, 0.22%)</title><rect x="25.7481%" y="69" width="0.2198%" height="15" fill="rgb(236,97,10)" fg:x="1523" fg:w="13"/><text x="25.9981%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (83 samples, 1.40%)</title><rect x="24.6661%" y="117" width="1.4032%" height="15" fill="rgb(233,208,19)" fg:x="1459" fg:w="83"/><text x="24.9161%" y="127.50"></text></g><g><title>log::max_level (6 samples, 0.10%)</title><rect x="25.9679%" y="101" width="0.1014%" height="15" fill="rgb(216,164,2)" fg:x="1536" fg:w="6"/><text x="26.2179%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.10%)</title><rect x="25.9679%" y="85" width="0.1014%" height="15" fill="rgb(220,129,5)" fg:x="1536" fg:w="6"/><text x="26.2179%" y="95.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (2 samples, 0.03%)</title><rect x="26.0693%" y="117" width="0.0338%" height="15" fill="rgb(242,17,10)" fg:x="1542" fg:w="2"/><text x="26.3193%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="26.0693%" y="101" width="0.0338%" height="15" fill="rgb(242,107,0)" fg:x="1542" fg:w="2"/><text x="26.3193%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.03%)</title><rect x="26.0693%" y="85" width="0.0338%" height="15" fill="rgb(251,28,31)" fg:x="1542" fg:w="2"/><text x="26.3193%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="26.0693%" y="69" width="0.0338%" height="15" fill="rgb(233,223,10)" fg:x="1542" fg:w="2"/><text x="26.3193%" y="79.50"></text></g><g><title>dpll::dpll::set_variable (277 samples, 4.68%)</title><rect x="21.4708%" y="133" width="4.6830%" height="15" fill="rgb(215,21,27)" fg:x="1270" fg:w="277"/><text x="21.7208%" y="143.50">dpll:..</text></g><g><title>log::max_level (3 samples, 0.05%)</title><rect x="26.1031%" y="117" width="0.0507%" height="15" fill="rgb(232,23,21)" fg:x="1544" fg:w="3"/><text x="26.3531%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.05%)</title><rect x="26.1031%" y="101" width="0.0507%" height="15" fill="rgb(244,5,23)" fg:x="1544" fg:w="3"/><text x="26.3531%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="26.1200%" y="85" width="0.0338%" height="15" fill="rgb(226,81,46)" fg:x="1545" fg:w="2"/><text x="26.3700%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (116 samples, 1.96%)</title><rect x="40.1691%" y="117" width="1.9611%" height="15" fill="rgb(247,70,30)" fg:x="2376" fg:w="116"/><text x="40.4191%" y="127.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (116 samples, 1.96%)</title><rect x="40.1691%" y="101" width="1.9611%" height="15" fill="rgb(212,68,19)" fg:x="2376" fg:w="116"/><text x="40.4191%" y="111.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (116 samples, 1.96%)</title><rect x="40.1691%" y="85" width="1.9611%" height="15" fill="rgb(240,187,13)" fg:x="2376" fg:w="116"/><text x="40.4191%" y="95.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (332 samples, 5.61%)</title><rect x="42.1302%" y="117" width="5.6128%" height="15" fill="rgb(223,113,26)" fg:x="2492" fg:w="332"/><text x="42.3802%" y="127.50">&lt;core::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (191 samples, 3.23%)</title><rect x="44.5139%" y="101" width="3.2291%" height="15" fill="rgb(206,192,2)" fg:x="2633" fg:w="191"/><text x="44.7639%" y="111.50">&lt;co..</text></g><g><title>dpll::dpll::undo_assignment (1,304 samples, 22.05%)</title><rect x="26.1538%" y="133" width="22.0456%" height="15" fill="rgb(241,108,4)" fg:x="1547" fg:w="1304"/><text x="26.4038%" y="143.50">dpll::dpll::undo_assignment</text></g><g><title>&lt;dpll::schemas::Value as core::clone::Clone&gt;::clone (27 samples, 0.46%)</title><rect x="47.7430%" y="117" width="0.4565%" height="15" fill="rgb(247,173,49)" fg:x="2824" fg:w="27"/><text x="47.9930%" y="127.50"></text></g><g><title>dpll::dpll::backtrack (1,865 samples, 31.53%)</title><rect x="17.1936%" y="149" width="31.5300%" height="15" fill="rgb(224,114,35)" fg:x="1017" fg:w="1865"/><text x="17.4436%" y="159.50">dpll::dpll::backtrack</text></g><g><title>log::max_level (31 samples, 0.52%)</title><rect x="48.1995%" y="133" width="0.5241%" height="15" fill="rgb(245,159,27)" fg:x="2851" fg:w="31"/><text x="48.4495%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (31 samples, 0.52%)</title><rect x="48.1995%" y="117" width="0.5241%" height="15" fill="rgb(245,172,44)" fg:x="2851" fg:w="31"/><text x="48.4495%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.52%)</title><rect x="48.1995%" y="101" width="0.5241%" height="15" fill="rgb(236,23,11)" fg:x="2851" fg:w="31"/><text x="48.4495%" y="111.50"></text></g><g><title>dpll::dpll::set_variable (16 samples, 0.27%)</title><rect x="48.7236%" y="149" width="0.2705%" height="15" fill="rgb(205,117,38)" fg:x="2882" fg:w="16"/><text x="48.9736%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (16 samples, 0.27%)</title><rect x="48.7236%" y="133" width="0.2705%" height="15" fill="rgb(237,72,25)" fg:x="2882" fg:w="16"/><text x="48.9736%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (16 samples, 0.27%)</title><rect x="48.7236%" y="117" width="0.2705%" height="15" fill="rgb(244,70,9)" fg:x="2882" fg:w="16"/><text x="48.9736%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy (16 samples, 0.27%)</title><rect x="48.7236%" y="101" width="0.2705%" height="15" fill="rgb(217,125,39)" fg:x="2882" fg:w="16"/><text x="48.9736%" y="111.50"></text></g><g><title>core::intrinsics::copy (16 samples, 0.27%)</title><rect x="48.7236%" y="85" width="0.2705%" height="15" fill="rgb(235,36,10)" fg:x="2882" fg:w="16"/><text x="48.9736%" y="95.50"></text></g><g><title>dpll::dpll::undo_assignment (16 samples, 0.27%)</title><rect x="48.7236%" y="69" width="0.2705%" height="15" fill="rgb(251,123,47)" fg:x="2882" fg:w="16"/><text x="48.9736%" y="79.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.08%)</title><rect x="56.5680%" y="117" width="0.0845%" height="15" fill="rgb(221,13,13)" fg:x="3346" fg:w="5"/><text x="56.8180%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (5 samples, 0.08%)</title><rect x="56.5680%" y="101" width="0.0845%" height="15" fill="rgb(238,131,9)" fg:x="3346" fg:w="5"/><text x="56.8180%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.08%)</title><rect x="56.5680%" y="85" width="0.0845%" height="15" fill="rgb(211,50,8)" fg:x="3346" fg:w="5"/><text x="56.8180%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.08%)</title><rect x="56.5680%" y="69" width="0.0845%" height="15" fill="rgb(245,182,24)" fg:x="3346" fg:w="5"/><text x="56.8180%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.19%)</title><rect x="56.6526%" y="117" width="0.1860%" height="15" fill="rgb(242,14,37)" fg:x="3351" fg:w="11"/><text x="56.9026%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.19%)</title><rect x="56.6526%" y="101" width="0.1860%" height="15" fill="rgb(246,228,12)" fg:x="3351" fg:w="11"/><text x="56.9026%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.19%)</title><rect x="56.6526%" y="85" width="0.1860%" height="15" fill="rgb(213,55,15)" fg:x="3351" fg:w="11"/><text x="56.9026%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17 samples, 0.29%)</title><rect x="56.8385%" y="117" width="0.2874%" height="15" fill="rgb(209,9,3)" fg:x="3362" fg:w="17"/><text x="57.0885%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (17 samples, 0.29%)</title><rect x="56.8385%" y="101" width="0.2874%" height="15" fill="rgb(230,59,30)" fg:x="3362" fg:w="17"/><text x="57.0885%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (17 samples, 0.29%)</title><rect x="56.8385%" y="85" width="0.2874%" height="15" fill="rgb(209,121,21)" fg:x="3362" fg:w="17"/><text x="57.0885%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (87 samples, 1.47%)</title><rect x="58.0558%" y="101" width="1.4708%" height="15" fill="rgb(220,109,13)" fg:x="3434" fg:w="87"/><text x="58.3058%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 2.45%)</title><rect x="57.1260%" y="117" width="2.4514%" height="15" fill="rgb(232,18,1)" fg:x="3379" fg:w="145"/><text x="57.3760%" y="127.50">&lt;c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.05%)</title><rect x="59.5266%" y="101" width="0.0507%" height="15" fill="rgb(215,41,42)" fg:x="3521" fg:w="3"/><text x="59.7766%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.05%)</title><rect x="59.5266%" y="85" width="0.0507%" height="15" fill="rgb(224,123,36)" fg:x="3521" fg:w="3"/><text x="59.7766%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.05%)</title><rect x="59.5266%" y="69" width="0.0507%" height="15" fill="rgb(240,125,3)" fg:x="3521" fg:w="3"/><text x="59.7766%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="59.8140%" y="85" width="0.0338%" height="15" fill="rgb(205,98,50)" fg:x="3538" fg:w="2"/><text x="60.0640%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="59.8140%" y="69" width="0.0338%" height="15" fill="rgb(205,185,37)" fg:x="3538" fg:w="2"/><text x="60.0640%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (34 samples, 0.57%)</title><rect x="59.8140%" y="101" width="0.5748%" height="15" fill="rgb(238,207,15)" fg:x="3538" fg:w="34"/><text x="60.0640%" y="111.50"></text></g><g><title>core::ptr::write (32 samples, 0.54%)</title><rect x="59.8478%" y="85" width="0.5410%" height="15" fill="rgb(213,199,42)" fg:x="3540" fg:w="32"/><text x="60.0978%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (11 samples, 0.19%)</title><rect x="60.3888%" y="101" width="0.1860%" height="15" fill="rgb(235,201,11)" fg:x="3572" fg:w="11"/><text x="60.6388%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (10 samples, 0.17%)</title><rect x="60.4057%" y="85" width="0.1691%" height="15" fill="rgb(207,46,11)" fg:x="3573" fg:w="10"/><text x="60.6557%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (10 samples, 0.17%)</title><rect x="60.4057%" y="69" width="0.1691%" height="15" fill="rgb(241,35,35)" fg:x="3573" fg:w="10"/><text x="60.6557%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (18 samples, 0.30%)</title><rect x="60.5748%" y="69" width="0.3043%" height="15" fill="rgb(243,32,47)" fg:x="3583" fg:w="18"/><text x="60.8248%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (78 samples, 1.32%)</title><rect x="59.5773%" y="117" width="1.3187%" height="15" fill="rgb(247,202,23)" fg:x="3524" fg:w="78"/><text x="59.8273%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (19 samples, 0.32%)</title><rect x="60.5748%" y="101" width="0.3212%" height="15" fill="rgb(219,102,11)" fg:x="3583" fg:w="19"/><text x="60.8248%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (19 samples, 0.32%)</title><rect x="60.5748%" y="85" width="0.3212%" height="15" fill="rgb(243,110,44)" fg:x="3583" fg:w="19"/><text x="60.8248%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="60.8791%" y="69" width="0.0169%" height="15" fill="rgb(222,74,54)" fg:x="3601" fg:w="1"/><text x="61.1291%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.05%)</title><rect x="60.9637%" y="101" width="0.0507%" height="15" fill="rgb(216,99,12)" fg:x="3606" fg:w="3"/><text x="61.2137%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.05%)</title><rect x="60.9637%" y="85" width="0.0507%" height="15" fill="rgb(226,22,26)" fg:x="3606" fg:w="3"/><text x="61.2137%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.27%)</title><rect x="60.8960%" y="117" width="0.2705%" height="15" fill="rgb(217,163,10)" fg:x="3602" fg:w="16"/><text x="61.1460%" y="127.50"></text></g><g><title>core::ptr::write (9 samples, 0.15%)</title><rect x="61.0144%" y="101" width="0.1522%" height="15" fill="rgb(213,25,53)" fg:x="3609" fg:w="9"/><text x="61.2644%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (40 samples, 0.68%)</title><rect x="61.1665%" y="117" width="0.6762%" height="15" fill="rgb(252,105,26)" fg:x="3618" fg:w="40"/><text x="61.4165%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (25 samples, 0.42%)</title><rect x="61.4201%" y="101" width="0.4227%" height="15" fill="rgb(220,39,43)" fg:x="3633" fg:w="25"/><text x="61.6701%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (25 samples, 0.42%)</title><rect x="61.4201%" y="85" width="0.4227%" height="15" fill="rgb(229,68,48)" fg:x="3633" fg:w="25"/><text x="61.6701%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.17%)</title><rect x="62.5021%" y="101" width="0.1691%" height="15" fill="rgb(252,8,32)" fg:x="3697" fg:w="10"/><text x="62.7521%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.08%)</title><rect x="62.5866%" y="85" width="0.0845%" height="15" fill="rgb(223,20,43)" fg:x="3702" fg:w="5"/><text x="62.8366%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.08%)</title><rect x="62.5866%" y="69" width="0.0845%" height="15" fill="rgb(229,81,49)" fg:x="3702" fg:w="5"/><text x="62.8366%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.27%)</title><rect x="63.1784%" y="85" width="0.2705%" height="15" fill="rgb(236,28,36)" fg:x="3737" fg:w="16"/><text x="63.4284%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.27%)</title><rect x="63.1784%" y="69" width="0.2705%" height="15" fill="rgb(249,185,26)" fg:x="3737" fg:w="16"/><text x="63.4284%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.15%)</title><rect x="63.9222%" y="69" width="0.1522%" height="15" fill="rgb(249,174,33)" fg:x="3781" fg:w="9"/><text x="64.1722%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.15%)</title><rect x="63.9222%" y="53" width="0.1522%" height="15" fill="rgb(233,201,37)" fg:x="3781" fg:w="9"/><text x="64.1722%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.15%)</title><rect x="63.9222%" y="37" width="0.1522%" height="15" fill="rgb(221,78,26)" fg:x="3781" fg:w="9"/><text x="64.1722%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (62 samples, 1.05%)</title><rect x="64.0744%" y="69" width="1.0482%" height="15" fill="rgb(250,127,30)" fg:x="3790" fg:w="62"/><text x="64.3244%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (165 samples, 2.79%)</title><rect x="62.6712%" y="101" width="2.7895%" height="15" fill="rgb(230,49,44)" fg:x="3707" fg:w="165"/><text x="62.9212%" y="111.50">&lt;c..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (119 samples, 2.01%)</title><rect x="63.4489%" y="85" width="2.0118%" height="15" fill="rgb(229,67,23)" fg:x="3753" fg:w="119"/><text x="63.6989%" y="95.50">d..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (20 samples, 0.34%)</title><rect x="65.1226%" y="69" width="0.3381%" height="15" fill="rgb(249,83,47)" fg:x="3852" fg:w="20"/><text x="65.3726%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (44 samples, 0.74%)</title><rect x="65.4607%" y="101" width="0.7439%" height="15" fill="rgb(215,43,3)" fg:x="3872" fg:w="44"/><text x="65.7107%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (34 samples, 0.57%)</title><rect x="65.6298%" y="85" width="0.5748%" height="15" fill="rgb(238,154,13)" fg:x="3882" fg:w="34"/><text x="65.8798%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (34 samples, 0.57%)</title><rect x="65.6298%" y="69" width="0.5748%" height="15" fill="rgb(219,56,2)" fg:x="3882" fg:w="34"/><text x="65.8798%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (280 samples, 4.73%)</title><rect x="61.8428%" y="117" width="4.7337%" height="15" fill="rgb(233,0,4)" fg:x="3658" fg:w="280"/><text x="62.0928%" y="127.50">dpll::..</text></g><g><title>log::max_level (22 samples, 0.37%)</title><rect x="66.2046%" y="101" width="0.3719%" height="15" fill="rgb(235,30,7)" fg:x="3916" fg:w="22"/><text x="66.4546%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.37%)</title><rect x="66.2046%" y="85" width="0.3719%" height="15" fill="rgb(250,79,13)" fg:x="3916" fg:w="22"/><text x="66.4546%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.14%)</title><rect x="66.4413%" y="69" width="0.1352%" height="15" fill="rgb(211,146,34)" fg:x="3930" fg:w="8"/><text x="66.6913%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (9 samples, 0.15%)</title><rect x="66.5765%" y="117" width="0.1522%" height="15" fill="rgb(228,22,38)" fg:x="3938" fg:w="9"/><text x="66.8265%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="66.6948%" y="101" width="0.0338%" height="15" fill="rgb(235,168,5)" fg:x="3945" fg:w="2"/><text x="66.9448%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.03%)</title><rect x="66.6948%" y="85" width="0.0338%" height="15" fill="rgb(221,155,16)" fg:x="3945" fg:w="2"/><text x="66.9448%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="66.6948%" y="69" width="0.0338%" height="15" fill="rgb(215,215,53)" fg:x="3945" fg:w="2"/><text x="66.9448%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_false (1,069 samples, 18.07%)</title><rect x="48.9941%" y="149" width="18.0727%" height="15" fill="rgb(223,4,10)" fg:x="2898" fg:w="1069"/><text x="49.2441%" y="159.50">dpll::dpll::set_variable_fal..</text></g><g><title>dpll::dpll::set_variable (1,061 samples, 17.94%)</title><rect x="49.1293%" y="133" width="17.9374%" height="15" fill="rgb(234,103,6)" fg:x="2906" fg:w="1061"/><text x="49.3793%" y="143.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (20 samples, 0.34%)</title><rect x="66.7287%" y="117" width="0.3381%" height="15" fill="rgb(227,97,0)" fg:x="3947" fg:w="20"/><text x="66.9787%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.34%)</title><rect x="66.7287%" y="101" width="0.3381%" height="15" fill="rgb(234,150,53)" fg:x="3947" fg:w="20"/><text x="66.9787%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.19%)</title><rect x="66.8808%" y="85" width="0.1860%" height="15" fill="rgb(228,201,54)" fg:x="3956" fg:w="11"/><text x="67.1308%" y="95.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (29 samples, 0.49%)</title><rect x="79.7971%" y="117" width="0.4903%" height="15" fill="rgb(222,22,37)" fg:x="4720" fg:w="29"/><text x="80.0471%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (29 samples, 0.49%)</title><rect x="79.7971%" y="101" width="0.4903%" height="15" fill="rgb(237,53,32)" fg:x="4720" fg:w="29"/><text x="80.0471%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (29 samples, 0.49%)</title><rect x="79.7971%" y="85" width="0.4903%" height="15" fill="rgb(233,25,53)" fg:x="4720" fg:w="29"/><text x="80.0471%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (29 samples, 0.49%)</title><rect x="79.7971%" y="69" width="0.4903%" height="15" fill="rgb(210,40,34)" fg:x="4720" fg:w="29"/><text x="80.0471%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.24%)</title><rect x="80.2874%" y="117" width="0.2367%" height="15" fill="rgb(241,220,44)" fg:x="4749" fg:w="14"/><text x="80.5374%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14 samples, 0.24%)</title><rect x="80.2874%" y="101" width="0.2367%" height="15" fill="rgb(235,28,35)" fg:x="4749" fg:w="14"/><text x="80.5374%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.24%)</title><rect x="80.2874%" y="85" width="0.2367%" height="15" fill="rgb(210,56,17)" fg:x="4749" fg:w="14"/><text x="80.5374%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.22%)</title><rect x="80.5241%" y="117" width="0.2198%" height="15" fill="rgb(224,130,29)" fg:x="4763" fg:w="13"/><text x="80.7741%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.22%)</title><rect x="80.5241%" y="101" width="0.2198%" height="15" fill="rgb(235,212,8)" fg:x="4763" fg:w="13"/><text x="80.7741%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13 samples, 0.22%)</title><rect x="80.5241%" y="85" width="0.2198%" height="15" fill="rgb(223,33,50)" fg:x="4763" fg:w="13"/><text x="80.7741%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (148 samples, 2.50%)</title><rect x="81.7075%" y="101" width="2.5021%" height="15" fill="rgb(219,149,13)" fg:x="4833" fg:w="148"/><text x="81.9575%" y="111.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (209 samples, 3.53%)</title><rect x="80.7439%" y="117" width="3.5334%" height="15" fill="rgb(250,156,29)" fg:x="4776" fg:w="209"/><text x="80.9939%" y="127.50">&lt;co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.07%)</title><rect x="84.2096%" y="101" width="0.0676%" height="15" fill="rgb(216,193,19)" fg:x="4981" fg:w="4"/><text x="84.4596%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.07%)</title><rect x="84.2096%" y="85" width="0.0676%" height="15" fill="rgb(216,135,14)" fg:x="4981" fg:w="4"/><text x="84.4596%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.07%)</title><rect x="84.2096%" y="69" width="0.0676%" height="15" fill="rgb(241,47,5)" fg:x="4981" fg:w="4"/><text x="84.4596%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (6 samples, 0.10%)</title><rect x="85.0380%" y="85" width="0.1014%" height="15" fill="rgb(233,42,35)" fg:x="5030" fg:w="6"/><text x="85.2880%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.10%)</title><rect x="85.0380%" y="69" width="0.1014%" height="15" fill="rgb(231,13,6)" fg:x="5030" fg:w="6"/><text x="85.2880%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (56 samples, 0.95%)</title><rect x="85.0380%" y="101" width="0.9467%" height="15" fill="rgb(207,181,40)" fg:x="5030" fg:w="56"/><text x="85.2880%" y="111.50"></text></g><g><title>core::ptr::write (50 samples, 0.85%)</title><rect x="85.1395%" y="85" width="0.8453%" height="15" fill="rgb(254,173,49)" fg:x="5036" fg:w="50"/><text x="85.3895%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (3 samples, 0.05%)</title><rect x="85.9848%" y="101" width="0.0507%" height="15" fill="rgb(221,1,38)" fg:x="5086" fg:w="3"/><text x="86.2348%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (3 samples, 0.05%)</title><rect x="85.9848%" y="85" width="0.0507%" height="15" fill="rgb(206,124,46)" fg:x="5086" fg:w="3"/><text x="86.2348%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (3 samples, 0.05%)</title><rect x="85.9848%" y="69" width="0.0507%" height="15" fill="rgb(249,21,11)" fg:x="5086" fg:w="3"/><text x="86.2348%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (22 samples, 0.37%)</title><rect x="86.0355%" y="69" width="0.3719%" height="15" fill="rgb(222,201,40)" fg:x="5089" fg:w="22"/><text x="86.2855%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (131 samples, 2.21%)</title><rect x="84.2773%" y="117" width="2.2147%" height="15" fill="rgb(235,61,29)" fg:x="4985" fg:w="131"/><text x="84.5273%" y="127.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (27 samples, 0.46%)</title><rect x="86.0355%" y="101" width="0.4565%" height="15" fill="rgb(219,207,3)" fg:x="5089" fg:w="27"/><text x="86.2855%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (27 samples, 0.46%)</title><rect x="86.0355%" y="85" width="0.4565%" height="15" fill="rgb(222,56,46)" fg:x="5089" fg:w="27"/><text x="86.2855%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (5 samples, 0.08%)</title><rect x="86.4074%" y="69" width="0.0845%" height="15" fill="rgb(239,76,54)" fg:x="5111" fg:w="5"/><text x="86.6574%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="86.6272%" y="101" width="0.0169%" height="15" fill="rgb(231,124,27)" fg:x="5124" fg:w="1"/><text x="86.8772%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="86.6272%" y="85" width="0.0169%" height="15" fill="rgb(249,195,6)" fg:x="5124" fg:w="1"/><text x="86.8772%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="86.6441%" y="101" width="0.0169%" height="15" fill="rgb(237,174,47)" fg:x="5125" fg:w="1"/><text x="86.8941%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.56%)</title><rect x="86.4920%" y="117" width="0.5579%" height="15" fill="rgb(206,201,31)" fg:x="5116" fg:w="33"/><text x="86.7420%" y="127.50"></text></g><g><title>core::ptr::write (23 samples, 0.39%)</title><rect x="86.6610%" y="101" width="0.3888%" height="15" fill="rgb(231,57,52)" fg:x="5126" fg:w="23"/><text x="86.9110%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (83 samples, 1.40%)</title><rect x="87.0499%" y="117" width="1.4032%" height="15" fill="rgb(248,177,22)" fg:x="5149" fg:w="83"/><text x="87.2999%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (45 samples, 0.76%)</title><rect x="87.6923%" y="101" width="0.7608%" height="15" fill="rgb(215,211,37)" fg:x="5187" fg:w="45"/><text x="87.9423%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (45 samples, 0.76%)</title><rect x="87.6923%" y="85" width="0.7608%" height="15" fill="rgb(241,128,51)" fg:x="5187" fg:w="45"/><text x="87.9423%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.27%)</title><rect x="89.2984%" y="101" width="0.2705%" height="15" fill="rgb(227,165,31)" fg:x="5282" fg:w="16"/><text x="89.5484%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.20%)</title><rect x="89.3660%" y="85" width="0.2029%" height="15" fill="rgb(228,167,24)" fg:x="5286" fg:w="12"/><text x="89.6160%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12 samples, 0.20%)</title><rect x="89.3660%" y="69" width="0.2029%" height="15" fill="rgb(228,143,12)" fg:x="5286" fg:w="12"/><text x="89.6160%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.42%)</title><rect x="90.2451%" y="85" width="0.4227%" height="15" fill="rgb(249,149,8)" fg:x="5338" fg:w="25"/><text x="90.4951%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (25 samples, 0.42%)</title><rect x="90.2451%" y="69" width="0.4227%" height="15" fill="rgb(243,35,44)" fg:x="5338" fg:w="25"/><text x="90.4951%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.29%)</title><rect x="91.3440%" y="69" width="0.2874%" height="15" fill="rgb(246,89,9)" fg:x="5403" fg:w="17"/><text x="91.5940%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.29%)</title><rect x="91.3440%" y="53" width="0.2874%" height="15" fill="rgb(233,213,13)" fg:x="5403" fg:w="17"/><text x="91.5940%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.29%)</title><rect x="91.3440%" y="37" width="0.2874%" height="15" fill="rgb(233,141,41)" fg:x="5403" fg:w="17"/><text x="91.5940%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (115 samples, 1.94%)</title><rect x="91.6314%" y="69" width="1.9442%" height="15" fill="rgb(239,167,4)" fg:x="5420" fg:w="115"/><text x="91.8814%" y="79.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (281 samples, 4.75%)</title><rect x="89.5689%" y="101" width="4.7506%" height="15" fill="rgb(209,217,16)" fg:x="5298" fg:w="281"/><text x="89.8189%" y="111.50">&lt;core:..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (216 samples, 3.65%)</title><rect x="90.6678%" y="85" width="3.6517%" height="15" fill="rgb(219,88,35)" fg:x="5363" fg:w="216"/><text x="90.9178%" y="95.50">dpll..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (44 samples, 0.74%)</title><rect x="93.5757%" y="69" width="0.7439%" height="15" fill="rgb(220,193,23)" fg:x="5535" fg:w="44"/><text x="93.8257%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (79 samples, 1.34%)</title><rect x="94.3195%" y="101" width="1.3356%" height="15" fill="rgb(230,90,52)" fg:x="5579" fg:w="79"/><text x="94.5695%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (65 samples, 1.10%)</title><rect x="94.5562%" y="85" width="1.0989%" height="15" fill="rgb(252,106,19)" fg:x="5593" fg:w="65"/><text x="94.8062%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (65 samples, 1.10%)</title><rect x="94.5562%" y="69" width="1.0989%" height="15" fill="rgb(206,74,20)" fg:x="5593" fg:w="65"/><text x="94.8062%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (445 samples, 7.52%)</title><rect x="88.4531%" y="117" width="7.5232%" height="15" fill="rgb(230,138,44)" fg:x="5232" fg:w="445"/><text x="88.7031%" y="127.50">dpll::dpll..</text></g><g><title>log::max_level (19 samples, 0.32%)</title><rect x="95.6551%" y="101" width="0.3212%" height="15" fill="rgb(235,182,43)" fg:x="5658" fg:w="19"/><text x="95.9051%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (19 samples, 0.32%)</title><rect x="95.6551%" y="85" width="0.3212%" height="15" fill="rgb(242,16,51)" fg:x="5658" fg:w="19"/><text x="95.9051%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.14%)</title><rect x="95.8411%" y="69" width="0.1352%" height="15" fill="rgb(248,9,4)" fg:x="5669" fg:w="8"/><text x="96.0911%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (31 samples, 0.52%)</title><rect x="95.9763%" y="117" width="0.5241%" height="15" fill="rgb(210,31,22)" fg:x="5677" fg:w="31"/><text x="96.2263%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (19 samples, 0.32%)</title><rect x="96.1792%" y="101" width="0.3212%" height="15" fill="rgb(239,54,39)" fg:x="5689" fg:w="19"/><text x="96.4292%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (19 samples, 0.32%)</title><rect x="96.1792%" y="85" width="0.3212%" height="15" fill="rgb(230,99,41)" fg:x="5689" fg:w="19"/><text x="96.4292%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (19 samples, 0.32%)</title><rect x="96.1792%" y="69" width="0.3212%" height="15" fill="rgb(253,106,12)" fg:x="5689" fg:w="19"/><text x="96.4292%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_true (1,780 samples, 30.09%)</title><rect x="67.0668%" y="149" width="30.0930%" height="15" fill="rgb(213,46,41)" fg:x="3967" fg:w="1780"/><text x="67.3168%" y="159.50">dpll::dpll::set_variable_true</text></g><g><title>dpll::dpll::set_variable (1,753 samples, 29.64%)</title><rect x="67.5232%" y="133" width="29.6365%" height="15" fill="rgb(215,133,35)" fg:x="3994" fg:w="1753"/><text x="67.7732%" y="143.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (39 samples, 0.66%)</title><rect x="96.5004%" y="117" width="0.6593%" height="15" fill="rgb(213,28,5)" fg:x="5708" fg:w="39"/><text x="96.7504%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (39 samples, 0.66%)</title><rect x="96.5004%" y="101" width="0.6593%" height="15" fill="rgb(215,77,49)" fg:x="5708" fg:w="39"/><text x="96.7504%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.30%)</title><rect x="96.8555%" y="85" width="0.3043%" height="15" fill="rgb(248,100,22)" fg:x="5729" fg:w="18"/><text x="97.1055%" y="95.50"></text></g><g><title>_start (5,499 samples, 92.97%)</title><rect x="4.2942%" y="309" width="92.9670%" height="15" fill="rgb(208,67,9)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="319.50">_start</text></g><g><title>__libc_start_main (5,499 samples, 92.97%)</title><rect x="4.2942%" y="293" width="92.9670%" height="15" fill="rgb(219,133,21)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="303.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,499 samples, 92.97%)</title><rect x="4.2942%" y="277" width="92.9670%" height="15" fill="rgb(246,46,29)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="287.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (5,499 samples, 92.97%)</title><rect x="4.2942%" y="261" width="92.9670%" height="15" fill="rgb(246,185,52)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="271.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (5,499 samples, 92.97%)</title><rect x="4.2942%" y="245" width="92.9670%" height="15" fill="rgb(252,136,11)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="255.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,499 samples, 92.97%)</title><rect x="4.2942%" y="229" width="92.9670%" height="15" fill="rgb(219,138,53)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="239.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,499 samples, 92.97%)</title><rect x="4.2942%" y="213" width="92.9670%" height="15" fill="rgb(211,51,23)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="223.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,499 samples, 92.97%)</title><rect x="4.2942%" y="197" width="92.9670%" height="15" fill="rgb(247,221,28)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="207.50">core::ops::function::FnOnce::call_once</text></g><g><title>dpll::main (5,499 samples, 92.97%)</title><rect x="4.2942%" y="181" width="92.9670%" height="15" fill="rgb(251,222,45)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="191.50">dpll::main</text></g><g><title>dpll::dpll::dpll (5,499 samples, 92.97%)</title><rect x="4.2942%" y="165" width="92.9670%" height="15" fill="rgb(217,162,53)" fg:x="254" fg:w="5499"/><text x="4.5442%" y="175.50">dpll::dpll::dpll</text></g><g><title>log::max_level (6 samples, 0.10%)</title><rect x="97.1598%" y="149" width="0.1014%" height="15" fill="rgb(229,93,14)" fg:x="5747" fg:w="6"/><text x="97.4098%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.10%)</title><rect x="97.1598%" y="133" width="0.1014%" height="15" fill="rgb(209,67,49)" fg:x="5747" fg:w="6"/><text x="97.4098%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.10%)</title><rect x="97.1598%" y="117" width="0.1014%" height="15" fill="rgb(213,87,29)" fg:x="5747" fg:w="6"/><text x="97.4098%" y="127.50"></text></g><g><title>dpll::dpll::backtrack (33 samples, 0.56%)</title><rect x="97.2612%" y="293" width="0.5579%" height="15" fill="rgb(205,151,52)" fg:x="5753" fg:w="33"/><text x="97.5112%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.08%)</title><rect x="97.7346%" y="277" width="0.0845%" height="15" fill="rgb(253,215,39)" fg:x="5781" fg:w="5"/><text x="97.9846%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (35 samples, 0.59%)</title><rect x="97.8191%" y="293" width="0.5917%" height="15" fill="rgb(221,220,41)" fg:x="5786" fg:w="35"/><text x="98.0691%" y="303.50"></text></g><g><title>all (5,915 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="5915"/><text x="0.2500%" y="351.50"></text></g><g><title>dpll (5,915 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="5915"/><text x="0.2500%" y="335.50">dpll</text></g><g><title>log::STATE (162 samples, 2.74%)</title><rect x="97.2612%" y="309" width="2.7388%" height="15" fill="rgb(240,128,52)" fg:x="5753" fg:w="162"/><text x="97.5112%" y="319.50">lo..</text></g><g><title>dpll::dpll::set_variable (94 samples, 1.59%)</title><rect x="98.4108%" y="293" width="1.5892%" height="15" fill="rgb(253,114,12)" fg:x="5821" fg:w="94"/><text x="98.6608%" y="303.50"></text></g></svg></svg>