<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="13772"><g><title>dpll::dpll::backtrack (7 samples, 0.05%)</title><rect x="0.0000%" y="293" width="0.0508%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (7 samples, 0.05%)</title><rect x="0.0000%" y="277" width="0.0508%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (39 samples, 0.28%)</title><rect x="0.0508%" y="293" width="0.2832%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="39"/><text x="0.3008%" y="303.50"></text></g><g><title>[[heap]] (48 samples, 0.35%)</title><rect x="0.0000%" y="309" width="0.3485%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="48"/><text x="0.2500%" y="319.50"></text></g><g><title>dpll::dpll::set_variable (2 samples, 0.01%)</title><rect x="0.3340%" y="293" width="0.0145%" height="15" fill="rgb(208,68,35)" fg:x="46" fg:w="2"/><text x="0.5840%" y="303.50"></text></g><g><title>dpll::dpll::find_unit (87 samples, 0.63%)</title><rect x="0.3485%" y="293" width="0.6317%" height="15" fill="rgb(232,128,0)" fg:x="48" fg:w="87"/><text x="0.5985%" y="303.50"></text></g><g><title>[[stack]] (156 samples, 1.13%)</title><rect x="0.3485%" y="309" width="1.1327%" height="15" fill="rgb(207,160,47)" fg:x="48" fg:w="156"/><text x="0.5985%" y="319.50"></text></g><g><title>dpll::dpll::undo_assignment (69 samples, 0.50%)</title><rect x="0.9802%" y="293" width="0.5010%" height="15" fill="rgb(228,23,34)" fg:x="135" fg:w="69"/><text x="1.2302%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.05%)</title><rect x="1.4813%" y="309" width="0.0508%" height="15" fill="rgb(218,30,26)" fg:x="204" fg:w="7"/><text x="1.7313%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="1.5176%" y="293" width="0.0145%" height="15" fill="rgb(220,122,19)" fg:x="209" fg:w="2"/><text x="1.7676%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="1.5176%" y="277" width="0.0145%" height="15" fill="rgb(250,228,42)" fg:x="209" fg:w="2"/><text x="1.7676%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="1.5176%" y="261" width="0.0145%" height="15" fill="rgb(240,193,28)" fg:x="209" fg:w="2"/><text x="1.7676%" y="271.50"></text></g><g><title>dpll::dpll::backtrack (13 samples, 0.09%)</title><rect x="1.5394%" y="293" width="0.0944%" height="15" fill="rgb(216,20,37)" fg:x="212" fg:w="13"/><text x="1.7894%" y="303.50"></text></g><g><title>dpll::dpll::set_variable_false (20 samples, 0.15%)</title><rect x="1.6846%" y="277" width="0.1452%" height="15" fill="rgb(206,188,39)" fg:x="232" fg:w="20"/><text x="1.9346%" y="287.50"></text></g><g><title>dpll::dpll::dpll (72 samples, 0.52%)</title><rect x="1.6337%" y="293" width="0.5228%" height="15" fill="rgb(217,207,13)" fg:x="225" fg:w="72"/><text x="1.8837%" y="303.50"></text></g><g><title>dpll::dpll::set_variable_true (45 samples, 0.33%)</title><rect x="1.8298%" y="277" width="0.3267%" height="15" fill="rgb(231,73,38)" fg:x="252" fg:w="45"/><text x="2.0798%" y="287.50"></text></g><g><title>dpll::dpll::set_variable (232 samples, 1.68%)</title><rect x="2.1638%" y="293" width="1.6846%" height="15" fill="rgb(225,20,46)" fg:x="298" fg:w="232"/><text x="2.4138%" y="303.50"></text></g><g><title>[unknown] (400 samples, 2.90%)</title><rect x="1.5321%" y="309" width="2.9044%" height="15" fill="rgb(210,31,41)" fg:x="211" fg:w="400"/><text x="1.7821%" y="319.50">[u..</text></g><g><title>dpll::dpll::undo_assignment (81 samples, 0.59%)</title><rect x="3.8484%" y="293" width="0.5881%" height="15" fill="rgb(221,200,47)" fg:x="530" fg:w="81"/><text x="4.0984%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.08%)</title><rect x="10.3543%" y="149" width="0.0799%" height="15" fill="rgb(226,26,5)" fg:x="1426" fg:w="11"/><text x="10.6043%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (11 samples, 0.08%)</title><rect x="10.3543%" y="133" width="0.0799%" height="15" fill="rgb(249,33,26)" fg:x="1426" fg:w="11"/><text x="10.6043%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (11 samples, 0.08%)</title><rect x="10.3543%" y="117" width="0.0799%" height="15" fill="rgb(235,183,28)" fg:x="1426" fg:w="11"/><text x="10.6043%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (123 samples, 0.89%)</title><rect x="10.4342%" y="149" width="0.8931%" height="15" fill="rgb(221,5,38)" fg:x="1437" fg:w="123"/><text x="10.6842%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (123 samples, 0.89%)</title><rect x="10.4342%" y="133" width="0.8931%" height="15" fill="rgb(247,18,42)" fg:x="1437" fg:w="123"/><text x="10.6842%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (123 samples, 0.89%)</title><rect x="10.4342%" y="117" width="0.8931%" height="15" fill="rgb(241,131,45)" fg:x="1437" fg:w="123"/><text x="10.6842%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (10 samples, 0.07%)</title><rect x="12.2059%" y="117" width="0.0726%" height="15" fill="rgb(249,31,29)" fg:x="1681" fg:w="10"/><text x="12.4559%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.07%)</title><rect x="12.2059%" y="101" width="0.0726%" height="15" fill="rgb(225,111,53)" fg:x="1681" fg:w="10"/><text x="12.4559%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (19 samples, 0.14%)</title><rect x="12.2059%" y="133" width="0.1380%" height="15" fill="rgb(238,160,17)" fg:x="1681" fg:w="19"/><text x="12.4559%" y="143.50"></text></g><g><title>core::ptr::read (9 samples, 0.07%)</title><rect x="12.2785%" y="117" width="0.0653%" height="15" fill="rgb(214,148,48)" fg:x="1691" fg:w="9"/><text x="12.5285%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (12 samples, 0.09%)</title><rect x="12.3439%" y="133" width="0.0871%" height="15" fill="rgb(232,36,49)" fg:x="1700" fg:w="12"/><text x="12.5939%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (125 samples, 0.91%)</title><rect x="12.4310%" y="101" width="0.9076%" height="15" fill="rgb(209,103,24)" fg:x="1712" fg:w="125"/><text x="12.6810%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (283 samples, 2.05%)</title><rect x="11.3273%" y="149" width="2.0549%" height="15" fill="rgb(229,88,8)" fg:x="1560" fg:w="283"/><text x="11.5773%" y="159.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (131 samples, 0.95%)</title><rect x="12.4310%" y="133" width="0.9512%" height="15" fill="rgb(213,181,19)" fg:x="1712" fg:w="131"/><text x="12.6810%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (131 samples, 0.95%)</title><rect x="12.4310%" y="117" width="0.9512%" height="15" fill="rgb(254,191,54)" fg:x="1712" fg:w="131"/><text x="12.6810%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (6 samples, 0.04%)</title><rect x="13.3387%" y="101" width="0.0436%" height="15" fill="rgb(241,83,37)" fg:x="1837" fg:w="6"/><text x="13.5887%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (605 samples, 4.39%)</title><rect x="13.3822%" y="149" width="4.3930%" height="15" fill="rgb(233,36,39)" fg:x="1843" fg:w="605"/><text x="13.6322%" y="159.50">core:..</text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (605 samples, 4.39%)</title><rect x="13.3822%" y="133" width="4.3930%" height="15" fill="rgb(226,3,54)" fg:x="1843" fg:w="605"/><text x="13.6322%" y="143.50">&lt;dpll..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (48 samples, 0.35%)</title><rect x="17.7752%" y="149" width="0.3485%" height="15" fill="rgb(245,192,40)" fg:x="2448" fg:w="48"/><text x="18.0252%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.01%)</title><rect x="18.1237%" y="149" width="0.0145%" height="15" fill="rgb(238,167,29)" fg:x="2496" fg:w="2"/><text x="18.3737%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="18.1237%" y="133" width="0.0145%" height="15" fill="rgb(232,182,51)" fg:x="2496" fg:w="2"/><text x="18.3737%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (9 samples, 0.07%)</title><rect x="19.4017%" y="133" width="0.0653%" height="15" fill="rgb(231,60,39)" fg:x="2672" fg:w="9"/><text x="19.6517%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (5 samples, 0.04%)</title><rect x="19.4307%" y="117" width="0.0363%" height="15" fill="rgb(208,69,12)" fg:x="2676" fg:w="5"/><text x="19.6807%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.20%)</title><rect x="19.9971%" y="117" width="0.1960%" height="15" fill="rgb(235,93,37)" fg:x="2754" fg:w="27"/><text x="20.2471%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27 samples, 0.20%)</title><rect x="19.9971%" y="101" width="0.1960%" height="15" fill="rgb(213,116,39)" fg:x="2754" fg:w="27"/><text x="20.2471%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.04%)</title><rect x="20.1931%" y="117" width="0.0363%" height="15" fill="rgb(222,207,29)" fg:x="2781" fg:w="5"/><text x="20.4431%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (173 samples, 1.26%)</title><rect x="19.4670%" y="133" width="1.2562%" height="15" fill="rgb(206,96,30)" fg:x="2681" fg:w="173"/><text x="19.7170%" y="143.50"></text></g><g><title>core::ptr::read (68 samples, 0.49%)</title><rect x="20.2295%" y="117" width="0.4938%" height="15" fill="rgb(218,138,4)" fg:x="2786" fg:w="68"/><text x="20.4795%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::le (256 samples, 1.86%)</title><rect x="20.7232%" y="133" width="1.8588%" height="15" fill="rgb(250,191,14)" fg:x="2854" fg:w="256"/><text x="20.9732%" y="143.50">c..</text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (155 samples, 1.13%)</title><rect x="21.4566%" y="117" width="1.1255%" height="15" fill="rgb(239,60,40)" fg:x="2955" fg:w="155"/><text x="21.7066%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (155 samples, 1.13%)</title><rect x="21.4566%" y="101" width="1.1255%" height="15" fill="rgb(206,27,48)" fg:x="2955" fg:w="155"/><text x="21.7066%" y="111.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.04%)</title><rect x="24.4264%" y="117" width="0.0363%" height="15" fill="rgb(225,35,8)" fg:x="3364" fg:w="5"/><text x="24.6764%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (5 samples, 0.04%)</title><rect x="24.4264%" y="101" width="0.0363%" height="15" fill="rgb(250,213,24)" fg:x="3364" fg:w="5"/><text x="24.6764%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.04%)</title><rect x="24.4264%" y="85" width="0.0363%" height="15" fill="rgb(247,123,22)" fg:x="3364" fg:w="5"/><text x="24.6764%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.04%)</title><rect x="24.4264%" y="69" width="0.0363%" height="15" fill="rgb(231,138,38)" fg:x="3364" fg:w="5"/><text x="24.6764%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.04%)</title><rect x="24.4627%" y="117" width="0.0436%" height="15" fill="rgb(231,145,46)" fg:x="3369" fg:w="6"/><text x="24.7127%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.04%)</title><rect x="24.4627%" y="101" width="0.0436%" height="15" fill="rgb(251,118,11)" fg:x="3369" fg:w="6"/><text x="24.7127%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.04%)</title><rect x="24.4627%" y="85" width="0.0436%" height="15" fill="rgb(217,147,25)" fg:x="3369" fg:w="6"/><text x="24.7127%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (22 samples, 0.16%)</title><rect x="24.6587%" y="101" width="0.1597%" height="15" fill="rgb(247,81,37)" fg:x="3396" fg:w="22"/><text x="24.9087%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.33%)</title><rect x="24.5062%" y="117" width="0.3340%" height="15" fill="rgb(209,12,38)" fg:x="3375" fg:w="46"/><text x="24.7562%" y="127.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.02%)</title><rect x="24.8185%" y="101" width="0.0218%" height="15" fill="rgb(227,1,9)" fg:x="3418" fg:w="3"/><text x="25.0685%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.02%)</title><rect x="24.8185%" y="85" width="0.0218%" height="15" fill="rgb(248,47,43)" fg:x="3418" fg:w="3"/><text x="25.0685%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.02%)</title><rect x="24.8185%" y="69" width="0.0218%" height="15" fill="rgb(221,10,30)" fg:x="3418" fg:w="3"/><text x="25.0685%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="24.8838%" y="85" width="0.0145%" height="15" fill="rgb(210,229,1)" fg:x="3427" fg:w="2"/><text x="25.1338%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="24.8838%" y="69" width="0.0145%" height="15" fill="rgb(222,148,37)" fg:x="3427" fg:w="2"/><text x="25.1338%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (12 samples, 0.09%)</title><rect x="24.8838%" y="101" width="0.0871%" height="15" fill="rgb(234,67,33)" fg:x="3427" fg:w="12"/><text x="25.1338%" y="111.50"></text></g><g><title>core::ptr::write (10 samples, 0.07%)</title><rect x="24.8983%" y="85" width="0.0726%" height="15" fill="rgb(247,98,35)" fg:x="3429" fg:w="10"/><text x="25.1483%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (2 samples, 0.01%)</title><rect x="24.9710%" y="101" width="0.0145%" height="15" fill="rgb(247,138,52)" fg:x="3439" fg:w="2"/><text x="25.2210%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (2 samples, 0.01%)</title><rect x="24.9710%" y="85" width="0.0145%" height="15" fill="rgb(213,79,30)" fg:x="3439" fg:w="2"/><text x="25.2210%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.01%)</title><rect x="24.9710%" y="69" width="0.0145%" height="15" fill="rgb(246,177,23)" fg:x="3439" fg:w="2"/><text x="25.2210%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (6 samples, 0.04%)</title><rect x="24.9855%" y="69" width="0.0436%" height="15" fill="rgb(230,62,27)" fg:x="3441" fg:w="6"/><text x="25.2355%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (27 samples, 0.20%)</title><rect x="24.8403%" y="117" width="0.1960%" height="15" fill="rgb(216,154,8)" fg:x="3421" fg:w="27"/><text x="25.0903%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (7 samples, 0.05%)</title><rect x="24.9855%" y="101" width="0.0508%" height="15" fill="rgb(244,35,45)" fg:x="3441" fg:w="7"/><text x="25.2355%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (7 samples, 0.05%)</title><rect x="24.9855%" y="85" width="0.0508%" height="15" fill="rgb(251,115,12)" fg:x="3441" fg:w="7"/><text x="25.2355%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23 samples, 0.17%)</title><rect x="25.0363%" y="117" width="0.1670%" height="15" fill="rgb(240,54,50)" fg:x="3448" fg:w="23"/><text x="25.2863%" y="127.50"></text></g><g><title>core::ptr::write (13 samples, 0.09%)</title><rect x="25.1089%" y="101" width="0.0944%" height="15" fill="rgb(233,84,52)" fg:x="3458" fg:w="13"/><text x="25.3589%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (38 samples, 0.28%)</title><rect x="25.2033%" y="117" width="0.2759%" height="15" fill="rgb(207,117,47)" fg:x="3471" fg:w="38"/><text x="25.4533%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (23 samples, 0.17%)</title><rect x="25.3122%" y="101" width="0.1670%" height="15" fill="rgb(249,43,39)" fg:x="3486" fg:w="23"/><text x="25.5622%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (23 samples, 0.17%)</title><rect x="25.3122%" y="85" width="0.1670%" height="15" fill="rgb(209,38,44)" fg:x="3486" fg:w="23"/><text x="25.5622%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="25.5809%" y="101" width="0.0436%" height="15" fill="rgb(236,212,23)" fg:x="3523" fg:w="6"/><text x="25.8309%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.02%)</title><rect x="25.6027%" y="85" width="0.0218%" height="15" fill="rgb(242,79,21)" fg:x="3526" fg:w="3"/><text x="25.8527%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="25.6027%" y="69" width="0.0218%" height="15" fill="rgb(211,96,35)" fg:x="3526" fg:w="3"/><text x="25.8527%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="25.7261%" y="85" width="0.0436%" height="15" fill="rgb(253,215,40)" fg:x="3543" fg:w="6"/><text x="25.9761%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="25.7261%" y="69" width="0.0436%" height="15" fill="rgb(211,81,21)" fg:x="3543" fg:w="6"/><text x="25.9761%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.04%)</title><rect x="25.8495%" y="69" width="0.0436%" height="15" fill="rgb(208,190,38)" fg:x="3560" fg:w="6"/><text x="26.0995%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.04%)</title><rect x="25.8495%" y="53" width="0.0436%" height="15" fill="rgb(235,213,38)" fg:x="3560" fg:w="6"/><text x="26.0995%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.04%)</title><rect x="25.8495%" y="37" width="0.0436%" height="15" fill="rgb(237,122,38)" fg:x="3560" fg:w="6"/><text x="26.0995%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (29 samples, 0.21%)</title><rect x="25.8931%" y="69" width="0.2106%" height="15" fill="rgb(244,218,35)" fg:x="3566" fg:w="29"/><text x="26.1431%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (77 samples, 0.56%)</title><rect x="25.6245%" y="101" width="0.5591%" height="15" fill="rgb(240,68,47)" fg:x="3529" fg:w="77"/><text x="25.8745%" y="111.50"></text></g><g><title>dpll::dpll::find_unit::_{{closure}} (57 samples, 0.41%)</title><rect x="25.7697%" y="85" width="0.4139%" height="15" fill="rgb(210,16,53)" fg:x="3549" fg:w="57"/><text x="26.0197%" y="95.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (11 samples, 0.08%)</title><rect x="26.1037%" y="69" width="0.0799%" height="15" fill="rgb(235,124,12)" fg:x="3595" fg:w="11"/><text x="26.3537%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (24 samples, 0.17%)</title><rect x="26.1836%" y="101" width="0.1743%" height="15" fill="rgb(224,169,11)" fg:x="3606" fg:w="24"/><text x="26.4336%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (19 samples, 0.14%)</title><rect x="26.2199%" y="85" width="0.1380%" height="15" fill="rgb(250,166,2)" fg:x="3611" fg:w="19"/><text x="26.4699%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (19 samples, 0.14%)</title><rect x="26.2199%" y="69" width="0.1380%" height="15" fill="rgb(242,216,29)" fg:x="3611" fg:w="19"/><text x="26.4699%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (130 samples, 0.94%)</title><rect x="25.4792%" y="117" width="0.9439%" height="15" fill="rgb(230,116,27)" fg:x="3509" fg:w="130"/><text x="25.7292%" y="127.50"></text></g><g><title>log::max_level (9 samples, 0.07%)</title><rect x="26.3578%" y="101" width="0.0653%" height="15" fill="rgb(228,99,48)" fg:x="3630" fg:w="9"/><text x="26.6078%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.07%)</title><rect x="26.3578%" y="85" width="0.0653%" height="15" fill="rgb(253,11,6)" fg:x="3630" fg:w="9"/><text x="26.6078%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.04%)</title><rect x="26.3796%" y="69" width="0.0436%" height="15" fill="rgb(247,143,39)" fg:x="3633" fg:w="6"/><text x="26.6296%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (11 samples, 0.08%)</title><rect x="26.4232%" y="117" width="0.0799%" height="15" fill="rgb(236,97,10)" fg:x="3639" fg:w="11"/><text x="26.6732%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.04%)</title><rect x="26.4667%" y="101" width="0.0363%" height="15" fill="rgb(233,208,19)" fg:x="3645" fg:w="5"/><text x="26.7167%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.04%)</title><rect x="26.4667%" y="85" width="0.0363%" height="15" fill="rgb(216,164,2)" fg:x="3645" fg:w="5"/><text x="26.7167%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.04%)</title><rect x="26.4667%" y="69" width="0.0363%" height="15" fill="rgb(220,129,5)" fg:x="3645" fg:w="5"/><text x="26.7167%" y="79.50"></text></g><g><title>dpll::dpll::set_variable (547 samples, 3.97%)</title><rect x="22.5821%" y="133" width="3.9718%" height="15" fill="rgb(242,17,10)" fg:x="3110" fg:w="547"/><text x="22.8321%" y="143.50">dpll..</text></g><g><title>log::max_level (7 samples, 0.05%)</title><rect x="26.5030%" y="117" width="0.0508%" height="15" fill="rgb(242,107,0)" fg:x="3650" fg:w="7"/><text x="26.7530%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.05%)</title><rect x="26.5030%" y="101" width="0.0508%" height="15" fill="rgb(251,28,31)" fg:x="3650" fg:w="7"/><text x="26.7530%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.04%)</title><rect x="26.5176%" y="85" width="0.0363%" height="15" fill="rgb(233,223,10)" fg:x="3652" fg:w="5"/><text x="26.7676%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (288 samples, 2.09%)</title><rect x="41.0761%" y="117" width="2.0912%" height="15" fill="rgb(215,21,27)" fg:x="5657" fg:w="288"/><text x="41.3261%" y="127.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (288 samples, 2.09%)</title><rect x="41.0761%" y="101" width="2.0912%" height="15" fill="rgb(232,23,21)" fg:x="5657" fg:w="288"/><text x="41.3261%" y="111.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (288 samples, 2.09%)</title><rect x="41.0761%" y="85" width="2.0912%" height="15" fill="rgb(244,5,23)" fg:x="5657" fg:w="288"/><text x="41.3261%" y="95.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (752 samples, 5.46%)</title><rect x="43.1673%" y="117" width="5.4604%" height="15" fill="rgb(226,81,46)" fg:x="5945" fg:w="752"/><text x="43.4173%" y="127.50">&lt;core::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (433 samples, 3.14%)</title><rect x="45.4836%" y="101" width="3.1441%" height="15" fill="rgb(247,70,30)" fg:x="6264" fg:w="433"/><text x="45.7336%" y="111.50">&lt;co..</text></g><g><title>dpll::dpll::undo_assignment (3,131 samples, 22.73%)</title><rect x="26.5539%" y="133" width="22.7345%" height="15" fill="rgb(212,68,19)" fg:x="3657" fg:w="3131"/><text x="26.8039%" y="143.50">dpll::dpll::undo_assignment</text></g><g><title>&lt;dpll::schemas::Value as core::clone::Clone&gt;::clone (91 samples, 0.66%)</title><rect x="48.6277%" y="117" width="0.6608%" height="15" fill="rgb(240,187,13)" fg:x="6697" fg:w="91"/><text x="48.8777%" y="127.50"></text></g><g><title>dpll::dpll::backtrack (4,365 samples, 31.69%)</title><rect x="18.1383%" y="149" width="31.6947%" height="15" fill="rgb(223,113,26)" fg:x="2498" fg:w="4365"/><text x="18.3883%" y="159.50">dpll::dpll::backtrack</text></g><g><title>log::max_level (75 samples, 0.54%)</title><rect x="49.2884%" y="133" width="0.5446%" height="15" fill="rgb(206,192,2)" fg:x="6788" fg:w="75"/><text x="49.5384%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (75 samples, 0.54%)</title><rect x="49.2884%" y="117" width="0.5446%" height="15" fill="rgb(241,108,4)" fg:x="6788" fg:w="75"/><text x="49.5384%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (75 samples, 0.54%)</title><rect x="49.2884%" y="101" width="0.5446%" height="15" fill="rgb(247,173,49)" fg:x="6788" fg:w="75"/><text x="49.5384%" y="111.50"></text></g><g><title>dpll::dpll::set_variable (26 samples, 0.19%)</title><rect x="49.8330%" y="149" width="0.1888%" height="15" fill="rgb(224,114,35)" fg:x="6863" fg:w="26"/><text x="50.0830%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (26 samples, 0.19%)</title><rect x="49.8330%" y="133" width="0.1888%" height="15" fill="rgb(245,159,27)" fg:x="6863" fg:w="26"/><text x="50.0830%" y="143.50"></text></g><g><title>dpll::dpll::undo_assignment (26 samples, 0.19%)</title><rect x="49.8330%" y="117" width="0.1888%" height="15" fill="rgb(245,172,44)" fg:x="6863" fg:w="26"/><text x="50.0830%" y="127.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (26 samples, 0.19%)</title><rect x="58.2341%" y="117" width="0.1888%" height="15" fill="rgb(236,23,11)" fg:x="8020" fg:w="26"/><text x="58.4841%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (26 samples, 0.19%)</title><rect x="58.2341%" y="101" width="0.1888%" height="15" fill="rgb(205,117,38)" fg:x="8020" fg:w="26"/><text x="58.4841%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (26 samples, 0.19%)</title><rect x="58.2341%" y="85" width="0.1888%" height="15" fill="rgb(237,72,25)" fg:x="8020" fg:w="26"/><text x="58.4841%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (26 samples, 0.19%)</title><rect x="58.2341%" y="69" width="0.1888%" height="15" fill="rgb(244,70,9)" fg:x="8020" fg:w="26"/><text x="58.4841%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (19 samples, 0.14%)</title><rect x="58.4229%" y="117" width="0.1380%" height="15" fill="rgb(217,125,39)" fg:x="8046" fg:w="19"/><text x="58.6729%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.14%)</title><rect x="58.4229%" y="101" width="0.1380%" height="15" fill="rgb(235,36,10)" fg:x="8046" fg:w="19"/><text x="58.6729%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.14%)</title><rect x="58.4229%" y="85" width="0.1380%" height="15" fill="rgb(251,123,47)" fg:x="8046" fg:w="19"/><text x="58.6729%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (48 samples, 0.35%)</title><rect x="58.5608%" y="117" width="0.3485%" height="15" fill="rgb(221,13,13)" fg:x="8065" fg:w="48"/><text x="58.8108%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (48 samples, 0.35%)</title><rect x="58.5608%" y="101" width="0.3485%" height="15" fill="rgb(238,131,9)" fg:x="8065" fg:w="48"/><text x="58.8108%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (48 samples, 0.35%)</title><rect x="58.5608%" y="85" width="0.3485%" height="15" fill="rgb(211,50,8)" fg:x="8065" fg:w="48"/><text x="58.8108%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (168 samples, 1.22%)</title><rect x="59.7589%" y="101" width="1.2199%" height="15" fill="rgb(245,182,24)" fg:x="8230" fg:w="168"/><text x="60.0089%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (293 samples, 2.13%)</title><rect x="58.9094%" y="117" width="2.1275%" height="15" fill="rgb(242,14,37)" fg:x="8113" fg:w="293"/><text x="59.1594%" y="127.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (8 samples, 0.06%)</title><rect x="60.9788%" y="101" width="0.0581%" height="15" fill="rgb(246,228,12)" fg:x="8398" fg:w="8"/><text x="61.2288%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (8 samples, 0.06%)</title><rect x="60.9788%" y="85" width="0.0581%" height="15" fill="rgb(213,55,15)" fg:x="8398" fg:w="8"/><text x="61.2288%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.06%)</title><rect x="60.9788%" y="69" width="0.0581%" height="15" fill="rgb(209,9,3)" fg:x="8398" fg:w="8"/><text x="61.2288%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (10 samples, 0.07%)</title><rect x="61.4798%" y="85" width="0.0726%" height="15" fill="rgb(230,59,30)" fg:x="8467" fg:w="10"/><text x="61.7298%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.07%)</title><rect x="61.4798%" y="69" width="0.0726%" height="15" fill="rgb(209,121,21)" fg:x="8467" fg:w="10"/><text x="61.7298%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (71 samples, 0.52%)</title><rect x="61.4798%" y="101" width="0.5155%" height="15" fill="rgb(220,109,13)" fg:x="8467" fg:w="71"/><text x="61.7298%" y="111.50"></text></g><g><title>core::ptr::write (61 samples, 0.44%)</title><rect x="61.5524%" y="85" width="0.4429%" height="15" fill="rgb(232,18,1)" fg:x="8477" fg:w="61"/><text x="61.8024%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (13 samples, 0.09%)</title><rect x="61.9954%" y="101" width="0.0944%" height="15" fill="rgb(215,41,42)" fg:x="8538" fg:w="13"/><text x="62.2454%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (12 samples, 0.09%)</title><rect x="62.0026%" y="85" width="0.0871%" height="15" fill="rgb(224,123,36)" fg:x="8539" fg:w="12"/><text x="62.2526%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (12 samples, 0.09%)</title><rect x="62.0026%" y="69" width="0.0871%" height="15" fill="rgb(240,125,3)" fg:x="8539" fg:w="12"/><text x="62.2526%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (39 samples, 0.28%)</title><rect x="62.0897%" y="69" width="0.2832%" height="15" fill="rgb(205,98,50)" fg:x="8551" fg:w="39"/><text x="62.3397%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (188 samples, 1.37%)</title><rect x="61.0369%" y="117" width="1.3651%" height="15" fill="rgb(205,185,37)" fg:x="8406" fg:w="188"/><text x="61.2869%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (43 samples, 0.31%)</title><rect x="62.0897%" y="101" width="0.3122%" height="15" fill="rgb(238,207,15)" fg:x="8551" fg:w="43"/><text x="62.3397%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (43 samples, 0.31%)</title><rect x="62.0897%" y="85" width="0.3122%" height="15" fill="rgb(213,199,42)" fg:x="8551" fg:w="43"/><text x="62.3397%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.03%)</title><rect x="62.3729%" y="69" width="0.0290%" height="15" fill="rgb(235,201,11)" fg:x="8590" fg:w="4"/><text x="62.6229%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.08%)</title><rect x="62.6125%" y="101" width="0.0799%" height="15" fill="rgb(207,46,11)" fg:x="8623" fg:w="11"/><text x="62.8625%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.08%)</title><rect x="62.6125%" y="85" width="0.0799%" height="15" fill="rgb(241,35,35)" fg:x="8623" fg:w="11"/><text x="62.8625%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (75 samples, 0.54%)</title><rect x="62.4020%" y="117" width="0.5446%" height="15" fill="rgb(243,32,47)" fg:x="8594" fg:w="75"/><text x="62.6520%" y="127.50"></text></g><g><title>core::ptr::write (35 samples, 0.25%)</title><rect x="62.6924%" y="101" width="0.2541%" height="15" fill="rgb(247,202,23)" fg:x="8634" fg:w="35"/><text x="62.9424%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (102 samples, 0.74%)</title><rect x="62.9466%" y="117" width="0.7406%" height="15" fill="rgb(219,102,11)" fg:x="8669" fg:w="102"/><text x="63.1966%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (64 samples, 0.46%)</title><rect x="63.2225%" y="101" width="0.4647%" height="15" fill="rgb(243,110,44)" fg:x="8707" fg:w="64"/><text x="63.4725%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (64 samples, 0.46%)</title><rect x="63.2225%" y="85" width="0.4647%" height="15" fill="rgb(222,74,54)" fg:x="8707" fg:w="64"/><text x="63.4725%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.17%)</title><rect x="64.2536%" y="101" width="0.1743%" height="15" fill="rgb(216,99,12)" fg:x="8849" fg:w="24"/><text x="64.5036%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (9 samples, 0.07%)</title><rect x="64.3625%" y="85" width="0.0653%" height="15" fill="rgb(226,22,26)" fg:x="8864" fg:w="9"/><text x="64.6125%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.07%)</title><rect x="64.3625%" y="69" width="0.0653%" height="15" fill="rgb(217,163,10)" fg:x="8864" fg:w="9"/><text x="64.6125%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.29%)</title><rect x="65.0378%" y="85" width="0.2904%" height="15" fill="rgb(213,25,53)" fg:x="8957" fg:w="40"/><text x="65.2878%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (40 samples, 0.29%)</title><rect x="65.0378%" y="69" width="0.2904%" height="15" fill="rgb(252,105,26)" fg:x="8957" fg:w="40"/><text x="65.2878%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.13%)</title><rect x="65.8220%" y="69" width="0.1307%" height="15" fill="rgb(220,39,43)" fg:x="9065" fg:w="18"/><text x="66.0720%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.13%)</title><rect x="65.8220%" y="53" width="0.1307%" height="15" fill="rgb(229,68,48)" fg:x="9065" fg:w="18"/><text x="66.0720%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.13%)</title><rect x="65.8220%" y="37" width="0.1307%" height="15" fill="rgb(252,8,32)" fg:x="9065" fg:w="18"/><text x="66.0720%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (145 samples, 1.05%)</title><rect x="65.9527%" y="69" width="1.0529%" height="15" fill="rgb(223,20,43)" fg:x="9083" fg:w="145"/><text x="66.2027%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (409 samples, 2.97%)</title><rect x="64.4278%" y="101" width="2.9698%" height="15" fill="rgb(229,81,49)" fg:x="8873" fg:w="409"/><text x="64.6778%" y="111.50">&lt;co..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (285 samples, 2.07%)</title><rect x="65.3282%" y="85" width="2.0694%" height="15" fill="rgb(236,28,36)" fg:x="8997" fg:w="285"/><text x="65.5782%" y="95.50">d..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (54 samples, 0.39%)</title><rect x="67.0055%" y="69" width="0.3921%" height="15" fill="rgb(249,185,26)" fg:x="9228" fg:w="54"/><text x="67.2555%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (147 samples, 1.07%)</title><rect x="67.3976%" y="101" width="1.0674%" height="15" fill="rgb(249,174,33)" fg:x="9282" fg:w="147"/><text x="67.6476%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (121 samples, 0.88%)</title><rect x="67.5864%" y="85" width="0.8786%" height="15" fill="rgb(233,201,37)" fg:x="9308" fg:w="121"/><text x="67.8364%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (121 samples, 0.88%)</title><rect x="67.5864%" y="69" width="0.8786%" height="15" fill="rgb(221,78,26)" fg:x="9308" fg:w="121"/><text x="67.8364%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (698 samples, 5.07%)</title><rect x="63.6872%" y="117" width="5.0683%" height="15" fill="rgb(250,127,30)" fg:x="8771" fg:w="698"/><text x="63.9372%" y="127.50">dpll::..</text></g><g><title>log::max_level (40 samples, 0.29%)</title><rect x="68.4650%" y="101" width="0.2904%" height="15" fill="rgb(230,49,44)" fg:x="9429" fg:w="40"/><text x="68.7150%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (40 samples, 0.29%)</title><rect x="68.4650%" y="85" width="0.2904%" height="15" fill="rgb(229,67,23)" fg:x="9429" fg:w="40"/><text x="68.7150%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.10%)</title><rect x="68.6538%" y="69" width="0.1017%" height="15" fill="rgb(249,83,47)" fg:x="9455" fg:w="14"/><text x="68.9038%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (51 samples, 0.37%)</title><rect x="68.7554%" y="117" width="0.3703%" height="15" fill="rgb(215,43,3)" fg:x="9469" fg:w="51"/><text x="69.0054%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.04%)</title><rect x="69.0895%" y="101" width="0.0363%" height="15" fill="rgb(238,154,13)" fg:x="9515" fg:w="5"/><text x="69.3395%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.04%)</title><rect x="69.0895%" y="85" width="0.0363%" height="15" fill="rgb(219,56,2)" fg:x="9515" fg:w="5"/><text x="69.3395%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.04%)</title><rect x="69.0895%" y="69" width="0.0363%" height="15" fill="rgb(233,0,4)" fg:x="9515" fg:w="5"/><text x="69.3395%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_false (2,670 samples, 19.39%)</title><rect x="50.0218%" y="149" width="19.3872%" height="15" fill="rgb(235,30,7)" fg:x="6889" fg:w="2670"/><text x="50.2718%" y="159.50">dpll::dpll::set_variable_false</text></g><g><title>dpll::dpll::set_variable (2,649 samples, 19.23%)</title><rect x="50.1743%" y="133" width="19.2347%" height="15" fill="rgb(250,79,13)" fg:x="6910" fg:w="2649"/><text x="50.4243%" y="143.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (39 samples, 0.28%)</title><rect x="69.1258%" y="117" width="0.2832%" height="15" fill="rgb(211,146,34)" fg:x="9520" fg:w="39"/><text x="69.3758%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (39 samples, 0.28%)</title><rect x="69.1258%" y="101" width="0.2832%" height="15" fill="rgb(228,22,38)" fg:x="9520" fg:w="39"/><text x="69.3758%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.12%)</title><rect x="69.2855%" y="85" width="0.1234%" height="15" fill="rgb(235,168,5)" fg:x="9542" fg:w="17"/><text x="69.5355%" y="95.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (32 samples, 0.23%)</title><rect x="81.6657%" y="117" width="0.2324%" height="15" fill="rgb(221,155,16)" fg:x="11247" fg:w="32"/><text x="81.9157%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (32 samples, 0.23%)</title><rect x="81.6657%" y="101" width="0.2324%" height="15" fill="rgb(215,215,53)" fg:x="11247" fg:w="32"/><text x="81.9157%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (32 samples, 0.23%)</title><rect x="81.6657%" y="85" width="0.2324%" height="15" fill="rgb(223,4,10)" fg:x="11247" fg:w="32"/><text x="81.9157%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (32 samples, 0.23%)</title><rect x="81.6657%" y="69" width="0.2324%" height="15" fill="rgb(234,103,6)" fg:x="11247" fg:w="32"/><text x="81.9157%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.12%)</title><rect x="81.8981%" y="117" width="0.1162%" height="15" fill="rgb(227,97,0)" fg:x="11279" fg:w="16"/><text x="82.1481%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.12%)</title><rect x="81.8981%" y="101" width="0.1162%" height="15" fill="rgb(234,150,53)" fg:x="11279" fg:w="16"/><text x="82.1481%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 0.12%)</title><rect x="81.8981%" y="85" width="0.1162%" height="15" fill="rgb(228,201,54)" fg:x="11279" fg:w="16"/><text x="82.1481%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (57 samples, 0.41%)</title><rect x="82.0142%" y="117" width="0.4139%" height="15" fill="rgb(222,22,37)" fg:x="11295" fg:w="57"/><text x="82.2642%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (57 samples, 0.41%)</title><rect x="82.0142%" y="101" width="0.4139%" height="15" fill="rgb(237,53,32)" fg:x="11295" fg:w="57"/><text x="82.2642%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (57 samples, 0.41%)</title><rect x="82.0142%" y="85" width="0.4139%" height="15" fill="rgb(233,25,53)" fg:x="11295" fg:w="57"/><text x="82.2642%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (258 samples, 1.87%)</title><rect x="83.3793%" y="101" width="1.8734%" height="15" fill="rgb(210,40,34)" fg:x="11483" fg:w="258"/><text x="83.6293%" y="111.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (402 samples, 2.92%)</title><rect x="82.4281%" y="117" width="2.9190%" height="15" fill="rgb(241,220,44)" fg:x="11352" fg:w="402"/><text x="82.6781%" y="127.50">&lt;c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (13 samples, 0.09%)</title><rect x="85.2527%" y="101" width="0.0944%" height="15" fill="rgb(235,28,35)" fg:x="11741" fg:w="13"/><text x="85.5027%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (13 samples, 0.09%)</title><rect x="85.2527%" y="85" width="0.0944%" height="15" fill="rgb(210,56,17)" fg:x="11741" fg:w="13"/><text x="85.5027%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.09%)</title><rect x="85.2527%" y="69" width="0.0944%" height="15" fill="rgb(224,130,29)" fg:x="11741" fg:w="13"/><text x="85.5027%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (10 samples, 0.07%)</title><rect x="85.8191%" y="85" width="0.0726%" height="15" fill="rgb(235,212,8)" fg:x="11819" fg:w="10"/><text x="86.0691%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.07%)</title><rect x="85.8191%" y="69" width="0.0726%" height="15" fill="rgb(223,33,50)" fg:x="11819" fg:w="10"/><text x="86.0691%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (121 samples, 0.88%)</title><rect x="85.8191%" y="101" width="0.8786%" height="15" fill="rgb(219,149,13)" fg:x="11819" fg:w="121"/><text x="86.0691%" y="111.50"></text></g><g><title>core::ptr::write (111 samples, 0.81%)</title><rect x="85.8917%" y="85" width="0.8060%" height="15" fill="rgb(250,156,29)" fg:x="11829" fg:w="111"/><text x="86.1417%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (16 samples, 0.12%)</title><rect x="86.6976%" y="101" width="0.1162%" height="15" fill="rgb(216,193,19)" fg:x="11940" fg:w="16"/><text x="86.9476%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (14 samples, 0.10%)</title><rect x="86.7122%" y="85" width="0.1017%" height="15" fill="rgb(216,135,14)" fg:x="11942" fg:w="14"/><text x="86.9622%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (14 samples, 0.10%)</title><rect x="86.7122%" y="69" width="0.1017%" height="15" fill="rgb(241,47,5)" fg:x="11942" fg:w="14"/><text x="86.9622%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (47 samples, 0.34%)</title><rect x="86.8138%" y="69" width="0.3413%" height="15" fill="rgb(233,42,35)" fg:x="11956" fg:w="47"/><text x="87.0638%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (258 samples, 1.87%)</title><rect x="85.3471%" y="117" width="1.8734%" height="15" fill="rgb(231,13,6)" fg:x="11754" fg:w="258"/><text x="85.5971%" y="127.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (56 samples, 0.41%)</title><rect x="86.8138%" y="101" width="0.4066%" height="15" fill="rgb(207,181,40)" fg:x="11956" fg:w="56"/><text x="87.0638%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (56 samples, 0.41%)</title><rect x="86.8138%" y="85" width="0.4066%" height="15" fill="rgb(254,173,49)" fg:x="11956" fg:w="56"/><text x="87.0638%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (9 samples, 0.07%)</title><rect x="87.1551%" y="69" width="0.0653%" height="15" fill="rgb(221,1,38)" fg:x="12003" fg:w="9"/><text x="87.4051%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (98 samples, 0.71%)</title><rect x="87.2204%" y="117" width="0.7116%" height="15" fill="rgb(206,124,46)" fg:x="12012" fg:w="98"/><text x="87.4704%" y="127.50"></text></g><g><title>core::ptr::write (64 samples, 0.46%)</title><rect x="87.4673%" y="101" width="0.4647%" height="15" fill="rgb(249,21,11)" fg:x="12046" fg:w="64"/><text x="87.7173%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (181 samples, 1.31%)</title><rect x="87.9320%" y="117" width="1.3143%" height="15" fill="rgb(222,201,40)" fg:x="12110" fg:w="181"/><text x="88.1820%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (105 samples, 0.76%)</title><rect x="88.4839%" y="101" width="0.7624%" height="15" fill="rgb(235,61,29)" fg:x="12186" fg:w="105"/><text x="88.7339%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (105 samples, 0.76%)</title><rect x="88.4839%" y="85" width="0.7624%" height="15" fill="rgb(219,207,3)" fg:x="12186" fg:w="105"/><text x="88.7339%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (43 samples, 0.31%)</title><rect x="90.0378%" y="101" width="0.3122%" height="15" fill="rgb(222,56,46)" fg:x="12400" fg:w="43"/><text x="90.2878%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22 samples, 0.16%)</title><rect x="90.1902%" y="85" width="0.1597%" height="15" fill="rgb(239,76,54)" fg:x="12421" fg:w="22"/><text x="90.4402%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22 samples, 0.16%)</title><rect x="90.1902%" y="69" width="0.1597%" height="15" fill="rgb(231,124,27)" fg:x="12421" fg:w="22"/><text x="90.4402%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.31%)</title><rect x="91.2721%" y="85" width="0.3122%" height="15" fill="rgb(249,195,6)" fg:x="12570" fg:w="43"/><text x="91.5221%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (43 samples, 0.31%)</title><rect x="91.2721%" y="69" width="0.3122%" height="15" fill="rgb(237,174,47)" fg:x="12570" fg:w="43"/><text x="91.5221%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.28%)</title><rect x="92.2887%" y="69" width="0.2832%" height="15" fill="rgb(206,201,31)" fg:x="12710" fg:w="39"/><text x="92.5387%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39 samples, 0.28%)</title><rect x="92.2887%" y="53" width="0.2832%" height="15" fill="rgb(231,57,52)" fg:x="12710" fg:w="39"/><text x="92.5387%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 0.28%)</title><rect x="92.2887%" y="37" width="0.2832%" height="15" fill="rgb(248,177,22)" fg:x="12710" fg:w="39"/><text x="92.5387%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (217 samples, 1.58%)</title><rect x="92.5719%" y="69" width="1.5757%" height="15" fill="rgb(215,211,37)" fg:x="12749" fg:w="217"/><text x="92.8219%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (601 samples, 4.36%)</title><rect x="90.3500%" y="101" width="4.3639%" height="15" fill="rgb(241,128,51)" fg:x="12443" fg:w="601"/><text x="90.6000%" y="111.50">&lt;core..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (431 samples, 3.13%)</title><rect x="91.5844%" y="85" width="3.1295%" height="15" fill="rgb(227,165,31)" fg:x="12613" fg:w="431"/><text x="91.8344%" y="95.50">dpl..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (78 samples, 0.57%)</title><rect x="94.1475%" y="69" width="0.5664%" height="15" fill="rgb(228,167,24)" fg:x="12966" fg:w="78"/><text x="94.3975%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (192 samples, 1.39%)</title><rect x="94.7139%" y="101" width="1.3941%" height="15" fill="rgb(228,143,12)" fg:x="13044" fg:w="192"/><text x="94.9639%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (160 samples, 1.16%)</title><rect x="94.9463%" y="85" width="1.1618%" height="15" fill="rgb(249,149,8)" fg:x="13076" fg:w="160"/><text x="95.1963%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (160 samples, 1.16%)</title><rect x="94.9463%" y="69" width="1.1618%" height="15" fill="rgb(243,35,44)" fg:x="13076" fg:w="160"/><text x="95.1963%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (989 samples, 7.18%)</title><rect x="89.2463%" y="117" width="7.1812%" height="15" fill="rgb(246,89,9)" fg:x="12291" fg:w="989"/><text x="89.4963%" y="127.50">dpll::dpll..</text></g><g><title>log::max_level (44 samples, 0.32%)</title><rect x="96.1080%" y="101" width="0.3195%" height="15" fill="rgb(233,213,13)" fg:x="13236" fg:w="44"/><text x="96.3580%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (44 samples, 0.32%)</title><rect x="96.1080%" y="85" width="0.3195%" height="15" fill="rgb(233,141,41)" fg:x="13236" fg:w="44"/><text x="96.3580%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.11%)</title><rect x="96.3186%" y="69" width="0.1089%" height="15" fill="rgb(239,167,4)" fg:x="13265" fg:w="15"/><text x="96.5686%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (64 samples, 0.46%)</title><rect x="96.4275%" y="117" width="0.4647%" height="15" fill="rgb(209,217,16)" fg:x="13280" fg:w="64"/><text x="96.6775%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.19%)</title><rect x="96.7035%" y="101" width="0.1888%" height="15" fill="rgb(219,88,35)" fg:x="13318" fg:w="26"/><text x="96.9535%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (26 samples, 0.19%)</title><rect x="96.7035%" y="85" width="0.1888%" height="15" fill="rgb(220,193,23)" fg:x="13318" fg:w="26"/><text x="96.9535%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (26 samples, 0.19%)</title><rect x="96.7035%" y="69" width="0.1888%" height="15" fill="rgb(230,90,52)" fg:x="13318" fg:w="26"/><text x="96.9535%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_true (3,854 samples, 27.98%)</title><rect x="69.4089%" y="149" width="27.9843%" height="15" fill="rgb(252,106,19)" fg:x="9559" fg:w="3854"/><text x="69.6589%" y="159.50">dpll::dpll::set_variable_true</text></g><g><title>dpll::dpll::set_variable (3,785 samples, 27.48%)</title><rect x="69.9100%" y="133" width="27.4833%" height="15" fill="rgb(206,74,20)" fg:x="9628" fg:w="3785"/><text x="70.1600%" y="143.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (69 samples, 0.50%)</title><rect x="96.8922%" y="117" width="0.5010%" height="15" fill="rgb(230,138,44)" fg:x="13344" fg:w="69"/><text x="97.1422%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (69 samples, 0.50%)</title><rect x="96.8922%" y="101" width="0.5010%" height="15" fill="rgb(235,182,43)" fg:x="13344" fg:w="69"/><text x="97.1422%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.19%)</title><rect x="97.2045%" y="85" width="0.1888%" height="15" fill="rgb(242,16,51)" fg:x="13387" fg:w="26"/><text x="97.4545%" y="95.50"></text></g><g><title>_start (12,816 samples, 93.06%)</title><rect x="4.4365%" y="309" width="93.0584%" height="15" fill="rgb(248,9,4)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="319.50">_start</text></g><g><title>__libc_start_main (12,816 samples, 93.06%)</title><rect x="4.4365%" y="293" width="93.0584%" height="15" fill="rgb(210,31,22)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="303.50">__libc_start_main</text></g><g><title>[libc.so.6] (12,816 samples, 93.06%)</title><rect x="4.4365%" y="277" width="93.0584%" height="15" fill="rgb(239,54,39)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="287.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (12,816 samples, 93.06%)</title><rect x="4.4365%" y="261" width="93.0584%" height="15" fill="rgb(230,99,41)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="271.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (12,816 samples, 93.06%)</title><rect x="4.4365%" y="245" width="93.0584%" height="15" fill="rgb(253,106,12)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="255.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (12,816 samples, 93.06%)</title><rect x="4.4365%" y="229" width="93.0584%" height="15" fill="rgb(213,46,41)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="239.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,816 samples, 93.06%)</title><rect x="4.4365%" y="213" width="93.0584%" height="15" fill="rgb(215,133,35)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="223.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,816 samples, 93.06%)</title><rect x="4.4365%" y="197" width="93.0584%" height="15" fill="rgb(213,28,5)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="207.50">core::ops::function::FnOnce::call_once</text></g><g><title>dpll::main (12,816 samples, 93.06%)</title><rect x="4.4365%" y="181" width="93.0584%" height="15" fill="rgb(215,77,49)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="191.50">dpll::main</text></g><g><title>dpll::dpll::dpll (12,816 samples, 93.06%)</title><rect x="4.4365%" y="165" width="93.0584%" height="15" fill="rgb(248,100,22)" fg:x="611" fg:w="12816"/><text x="4.6865%" y="175.50">dpll::dpll::dpll</text></g><g><title>log::max_level (14 samples, 0.10%)</title><rect x="97.3933%" y="149" width="0.1017%" height="15" fill="rgb(208,67,9)" fg:x="13413" fg:w="14"/><text x="97.6433%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.10%)</title><rect x="97.3933%" y="133" width="0.1017%" height="15" fill="rgb(219,133,21)" fg:x="13413" fg:w="14"/><text x="97.6433%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.10%)</title><rect x="97.3933%" y="117" width="0.1017%" height="15" fill="rgb(246,46,29)" fg:x="13413" fg:w="14"/><text x="97.6433%" y="127.50"></text></g><g><title>dpll::dpll::backtrack (88 samples, 0.64%)</title><rect x="97.4949%" y="293" width="0.6390%" height="15" fill="rgb(246,185,52)" fg:x="13427" fg:w="88"/><text x="97.7449%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (12 samples, 0.09%)</title><rect x="98.0468%" y="277" width="0.0871%" height="15" fill="rgb(252,136,11)" fg:x="13503" fg:w="12"/><text x="98.2968%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (67 samples, 0.49%)</title><rect x="98.1339%" y="293" width="0.4865%" height="15" fill="rgb(219,138,53)" fg:x="13515" fg:w="67"/><text x="98.3839%" y="303.50"></text></g><g><title>all (13,772 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="13772"/><text x="0.2500%" y="351.50"></text></g><g><title>dpll (13,772 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="13772"/><text x="0.2500%" y="335.50">dpll</text></g><g><title>log::STATE (345 samples, 2.51%)</title><rect x="97.4949%" y="309" width="2.5051%" height="15" fill="rgb(251,222,45)" fg:x="13427" fg:w="345"/><text x="97.7449%" y="319.50">lo..</text></g><g><title>dpll::dpll::set_variable (190 samples, 1.38%)</title><rect x="98.6204%" y="293" width="1.3796%" height="15" fill="rgb(217,162,53)" fg:x="13582" fg:w="190"/><text x="98.8704%" y="303.50"></text></g></svg></svg>