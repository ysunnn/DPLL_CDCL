<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="9222"><g><title>[dpll] (7 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0759%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="303.50"></text></g><g><title>dpll::dpll::set_variable (7 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0759%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (18 samples, 0.20%)</title><rect x="0.0759%" y="293" width="0.1952%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="18"/><text x="0.3259%" y="303.50"></text></g><g><title>dpll::dpll::set_variable (13 samples, 0.14%)</title><rect x="0.2711%" y="293" width="0.1410%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="13"/><text x="0.5211%" y="303.50"></text></g><g><title>[[heap]] (78 samples, 0.85%)</title><rect x="0.0000%" y="309" width="0.8458%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="78"/><text x="0.2500%" y="319.50"></text></g><g><title>dpll::dpll::undo_assignment (40 samples, 0.43%)</title><rect x="0.4121%" y="293" width="0.4337%" height="15" fill="rgb(232,128,0)" fg:x="38" fg:w="40"/><text x="0.6621%" y="303.50"></text></g><g><title>dpll::dpll::find_unit (65 samples, 0.70%)</title><rect x="0.8458%" y="293" width="0.7048%" height="15" fill="rgb(207,160,47)" fg:x="78" fg:w="65"/><text x="1.0958%" y="303.50"></text></g><g><title>[[stack]] (99 samples, 1.07%)</title><rect x="0.8458%" y="309" width="1.0735%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="99"/><text x="1.0958%" y="319.50"></text></g><g><title>dpll::dpll::undo_assignment (34 samples, 0.37%)</title><rect x="1.5506%" y="293" width="0.3687%" height="15" fill="rgb(218,30,26)" fg:x="143" fg:w="34"/><text x="1.8006%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.08%)</title><rect x="1.9193%" y="309" width="0.0759%" height="15" fill="rgb(220,122,19)" fg:x="177" fg:w="7"/><text x="2.1693%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="1.9735%" y="293" width="0.0217%" height="15" fill="rgb(250,228,42)" fg:x="182" fg:w="2"/><text x="2.2235%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="1.9735%" y="277" width="0.0217%" height="15" fill="rgb(240,193,28)" fg:x="182" fg:w="2"/><text x="2.2235%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="1.9735%" y="261" width="0.0217%" height="15" fill="rgb(216,20,37)" fg:x="182" fg:w="2"/><text x="2.2235%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="1.9735%" y="245" width="0.0217%" height="15" fill="rgb(206,188,39)" fg:x="182" fg:w="2"/><text x="2.2235%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.9844%" y="229" width="0.0108%" height="15" fill="rgb(217,207,13)" fg:x="183" fg:w="1"/><text x="2.2344%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.9844%" y="213" width="0.0108%" height="15" fill="rgb(231,73,38)" fg:x="183" fg:w="1"/><text x="2.2344%" y="223.50"></text></g><g><title>[libc.so.6] (13 samples, 0.14%)</title><rect x="1.9952%" y="309" width="0.1410%" height="15" fill="rgb(225,20,46)" fg:x="184" fg:w="13"/><text x="2.2452%" y="319.50"></text></g><g><title>dpll::dpll::set_variable (13 samples, 0.14%)</title><rect x="1.9952%" y="293" width="0.1410%" height="15" fill="rgb(210,31,41)" fg:x="184" fg:w="13"/><text x="2.2452%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.01%)</title><rect x="2.1362%" y="293" width="0.0108%" height="15" fill="rgb(221,200,47)" fg:x="197" fg:w="1"/><text x="2.3862%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (1 samples, 0.01%)</title><rect x="2.1362%" y="277" width="0.0108%" height="15" fill="rgb(226,26,5)" fg:x="197" fg:w="1"/><text x="2.3862%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy (1 samples, 0.01%)</title><rect x="2.1362%" y="261" width="0.0108%" height="15" fill="rgb(249,33,26)" fg:x="197" fg:w="1"/><text x="2.3862%" y="271.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.01%)</title><rect x="2.1362%" y="245" width="0.0108%" height="15" fill="rgb(235,183,28)" fg:x="197" fg:w="1"/><text x="2.3862%" y="255.50"></text></g><g><title>dpll::dpll::undo_assignment (1 samples, 0.01%)</title><rect x="2.1362%" y="229" width="0.0108%" height="15" fill="rgb(221,5,38)" fg:x="197" fg:w="1"/><text x="2.3862%" y="239.50"></text></g><g><title>dpll::dpll::backtrack (8 samples, 0.09%)</title><rect x="2.1470%" y="293" width="0.0867%" height="15" fill="rgb(247,18,42)" fg:x="198" fg:w="8"/><text x="2.3970%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.01%)</title><rect x="2.2229%" y="277" width="0.0108%" height="15" fill="rgb(241,131,45)" fg:x="205" fg:w="1"/><text x="2.4729%" y="287.50"></text></g><g><title>dpll::dpll::set_variable_false (15 samples, 0.16%)</title><rect x="2.2880%" y="277" width="0.1627%" height="15" fill="rgb(249,31,29)" fg:x="211" fg:w="15"/><text x="2.5380%" y="287.50"></text></g><g><title>dpll::dpll::dpll (54 samples, 0.59%)</title><rect x="2.2338%" y="293" width="0.5856%" height="15" fill="rgb(225,111,53)" fg:x="206" fg:w="54"/><text x="2.4838%" y="303.50"></text></g><g><title>dpll::dpll::set_variable_true (34 samples, 0.37%)</title><rect x="2.4507%" y="277" width="0.3687%" height="15" fill="rgb(238,160,17)" fg:x="226" fg:w="34"/><text x="2.7007%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (2 samples, 0.02%)</title><rect x="2.8193%" y="293" width="0.0217%" height="15" fill="rgb(214,148,48)" fg:x="260" fg:w="2"/><text x="3.0693%" y="303.50"></text></g><g><title>[unknown] (189 samples, 2.05%)</title><rect x="2.1362%" y="309" width="2.0494%" height="15" fill="rgb(232,36,49)" fg:x="197" fg:w="189"/><text x="2.3862%" y="319.50">[..</text></g><g><title>dpll::dpll::set_variable (124 samples, 1.34%)</title><rect x="2.8410%" y="293" width="1.3446%" height="15" fill="rgb(209,103,24)" fg:x="262" fg:w="124"/><text x="3.0910%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.15%)</title><rect x="9.6834%" y="149" width="0.1518%" height="15" fill="rgb(229,88,8)" fg:x="893" fg:w="14"/><text x="9.9334%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (14 samples, 0.15%)</title><rect x="9.6834%" y="133" width="0.1518%" height="15" fill="rgb(213,181,19)" fg:x="893" fg:w="14"/><text x="9.9334%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (14 samples, 0.15%)</title><rect x="9.6834%" y="117" width="0.1518%" height="15" fill="rgb(254,191,54)" fg:x="893" fg:w="14"/><text x="9.9334%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (83 samples, 0.90%)</title><rect x="9.8352%" y="149" width="0.9000%" height="15" fill="rgb(241,83,37)" fg:x="907" fg:w="83"/><text x="10.0852%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (83 samples, 0.90%)</title><rect x="9.8352%" y="133" width="0.9000%" height="15" fill="rgb(233,36,39)" fg:x="907" fg:w="83"/><text x="10.0852%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (83 samples, 0.90%)</title><rect x="9.8352%" y="117" width="0.9000%" height="15" fill="rgb(226,3,54)" fg:x="907" fg:w="83"/><text x="10.0852%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (3 samples, 0.03%)</title><rect x="11.8087%" y="117" width="0.0325%" height="15" fill="rgb(245,192,40)" fg:x="1089" fg:w="3"/><text x="12.0587%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.03%)</title><rect x="11.8087%" y="101" width="0.0325%" height="15" fill="rgb(238,167,29)" fg:x="1089" fg:w="3"/><text x="12.0587%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (7 samples, 0.08%)</title><rect x="11.8087%" y="133" width="0.0759%" height="15" fill="rgb(232,182,51)" fg:x="1089" fg:w="7"/><text x="12.0587%" y="143.50"></text></g><g><title>core::ptr::read (4 samples, 0.04%)</title><rect x="11.8412%" y="117" width="0.0434%" height="15" fill="rgb(231,60,39)" fg:x="1092" fg:w="4"/><text x="12.0912%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (12 samples, 0.13%)</title><rect x="11.8846%" y="133" width="0.1301%" height="15" fill="rgb(208,69,12)" fg:x="1096" fg:w="12"/><text x="12.1346%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (103 samples, 1.12%)</title><rect x="12.0147%" y="101" width="1.1169%" height="15" fill="rgb(235,93,37)" fg:x="1108" fg:w="103"/><text x="12.2647%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (227 samples, 2.46%)</title><rect x="10.7352%" y="149" width="2.4615%" height="15" fill="rgb(213,116,39)" fg:x="990" fg:w="227"/><text x="10.9852%" y="159.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (109 samples, 1.18%)</title><rect x="12.0147%" y="133" width="1.1820%" height="15" fill="rgb(222,207,29)" fg:x="1108" fg:w="109"/><text x="12.2647%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (109 samples, 1.18%)</title><rect x="12.0147%" y="117" width="1.1820%" height="15" fill="rgb(206,96,30)" fg:x="1108" fg:w="109"/><text x="12.2647%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (6 samples, 0.07%)</title><rect x="13.1316%" y="101" width="0.0651%" height="15" fill="rgb(218,138,4)" fg:x="1211" fg:w="6"/><text x="13.3816%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (384 samples, 4.16%)</title><rect x="13.1967%" y="149" width="4.1640%" height="15" fill="rgb(250,191,14)" fg:x="1217" fg:w="384"/><text x="13.4467%" y="159.50">core:..</text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (384 samples, 4.16%)</title><rect x="13.1967%" y="133" width="4.1640%" height="15" fill="rgb(239,60,40)" fg:x="1217" fg:w="384"/><text x="13.4467%" y="143.50">&lt;dpll..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (31 samples, 0.34%)</title><rect x="17.3607%" y="149" width="0.3362%" height="15" fill="rgb(206,27,48)" fg:x="1601" fg:w="31"/><text x="17.6107%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (3 samples, 0.03%)</title><rect x="18.9113%" y="133" width="0.0325%" height="15" fill="rgb(225,35,8)" fg:x="1744" fg:w="3"/><text x="19.1613%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (2 samples, 0.02%)</title><rect x="18.9221%" y="117" width="0.0217%" height="15" fill="rgb(250,213,24)" fg:x="1745" fg:w="2"/><text x="19.1721%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.14%)</title><rect x="19.4209%" y="117" width="0.1410%" height="15" fill="rgb(247,123,22)" fg:x="1791" fg:w="13"/><text x="19.6709%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13 samples, 0.14%)</title><rect x="19.4209%" y="101" width="0.1410%" height="15" fill="rgb(231,138,38)" fg:x="1791" fg:w="13"/><text x="19.6709%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.03%)</title><rect x="19.5619%" y="117" width="0.0325%" height="15" fill="rgb(231,145,46)" fg:x="1804" fg:w="3"/><text x="19.8119%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (82 samples, 0.89%)</title><rect x="18.9438%" y="133" width="0.8892%" height="15" fill="rgb(251,118,11)" fg:x="1747" fg:w="82"/><text x="19.1938%" y="143.50"></text></g><g><title>core::ptr::read (22 samples, 0.24%)</title><rect x="19.5944%" y="117" width="0.2386%" height="15" fill="rgb(217,147,25)" fg:x="1807" fg:w="22"/><text x="19.8444%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::le (172 samples, 1.87%)</title><rect x="19.8330%" y="133" width="1.8651%" height="15" fill="rgb(247,81,37)" fg:x="1829" fg:w="172"/><text x="20.0830%" y="143.50">c..</text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (109 samples, 1.18%)</title><rect x="20.5162%" y="117" width="1.1820%" height="15" fill="rgb(209,12,38)" fg:x="1892" fg:w="109"/><text x="20.7662%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (109 samples, 1.18%)</title><rect x="20.5162%" y="101" width="1.1820%" height="15" fill="rgb(227,1,9)" fg:x="1892" fg:w="109"/><text x="20.7662%" y="111.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.05%)</title><rect x="23.8018%" y="117" width="0.0542%" height="15" fill="rgb(248,47,43)" fg:x="2195" fg:w="5"/><text x="24.0518%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (5 samples, 0.05%)</title><rect x="23.8018%" y="101" width="0.0542%" height="15" fill="rgb(221,10,30)" fg:x="2195" fg:w="5"/><text x="24.0518%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.05%)</title><rect x="23.8018%" y="85" width="0.0542%" height="15" fill="rgb(210,229,1)" fg:x="2195" fg:w="5"/><text x="24.0518%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.05%)</title><rect x="23.8018%" y="69" width="0.0542%" height="15" fill="rgb(222,148,37)" fg:x="2195" fg:w="5"/><text x="24.0518%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="23.8560%" y="117" width="0.0108%" height="15" fill="rgb(234,67,33)" fg:x="2200" fg:w="1"/><text x="24.1060%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="23.8560%" y="101" width="0.0108%" height="15" fill="rgb(247,98,35)" fg:x="2200" fg:w="1"/><text x="24.1060%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="23.8560%" y="85" width="0.0108%" height="15" fill="rgb(247,138,52)" fg:x="2200" fg:w="1"/><text x="24.1060%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.11%)</title><rect x="23.8668%" y="117" width="0.1084%" height="15" fill="rgb(213,79,30)" fg:x="2201" fg:w="10"/><text x="24.1168%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.11%)</title><rect x="23.8668%" y="101" width="0.1084%" height="15" fill="rgb(246,177,23)" fg:x="2201" fg:w="10"/><text x="24.1168%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.11%)</title><rect x="23.8668%" y="85" width="0.1084%" height="15" fill="rgb(230,62,27)" fg:x="2201" fg:w="10"/><text x="24.1168%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (24 samples, 0.26%)</title><rect x="24.1162%" y="101" width="0.2602%" height="15" fill="rgb(216,154,8)" fg:x="2224" fg:w="24"/><text x="24.3662%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.42%)</title><rect x="23.9753%" y="117" width="0.4229%" height="15" fill="rgb(244,35,45)" fg:x="2211" fg:w="39"/><text x="24.2253%" y="127.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.02%)</title><rect x="24.3765%" y="101" width="0.0217%" height="15" fill="rgb(251,115,12)" fg:x="2248" fg:w="2"/><text x="24.6265%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.02%)</title><rect x="24.3765%" y="85" width="0.0217%" height="15" fill="rgb(240,54,50)" fg:x="2248" fg:w="2"/><text x="24.6265%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.02%)</title><rect x="24.3765%" y="69" width="0.0217%" height="15" fill="rgb(233,84,52)" fg:x="2248" fg:w="2"/><text x="24.6265%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (4 samples, 0.04%)</title><rect x="24.5175%" y="85" width="0.0434%" height="15" fill="rgb(207,117,47)" fg:x="2261" fg:w="4"/><text x="24.7675%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.04%)</title><rect x="24.5175%" y="69" width="0.0434%" height="15" fill="rgb(249,43,39)" fg:x="2261" fg:w="4"/><text x="24.7675%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (12 samples, 0.13%)</title><rect x="24.5175%" y="101" width="0.1301%" height="15" fill="rgb(209,38,44)" fg:x="2261" fg:w="12"/><text x="24.7675%" y="111.50"></text></g><g><title>core::ptr::write (8 samples, 0.09%)</title><rect x="24.5608%" y="85" width="0.0867%" height="15" fill="rgb(236,212,23)" fg:x="2265" fg:w="8"/><text x="24.8108%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (2 samples, 0.02%)</title><rect x="24.6476%" y="101" width="0.0217%" height="15" fill="rgb(242,79,21)" fg:x="2273" fg:w="2"/><text x="24.8976%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (2 samples, 0.02%)</title><rect x="24.6476%" y="85" width="0.0217%" height="15" fill="rgb(211,96,35)" fg:x="2273" fg:w="2"/><text x="24.8976%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.02%)</title><rect x="24.6476%" y="69" width="0.0217%" height="15" fill="rgb(253,215,40)" fg:x="2273" fg:w="2"/><text x="24.8976%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (10 samples, 0.11%)</title><rect x="24.6693%" y="69" width="0.1084%" height="15" fill="rgb(211,81,21)" fg:x="2275" fg:w="10"/><text x="24.9193%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (36 samples, 0.39%)</title><rect x="24.3982%" y="117" width="0.3904%" height="15" fill="rgb(208,190,38)" fg:x="2250" fg:w="36"/><text x="24.6482%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (11 samples, 0.12%)</title><rect x="24.6693%" y="101" width="0.1193%" height="15" fill="rgb(235,213,38)" fg:x="2275" fg:w="11"/><text x="24.9193%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (11 samples, 0.12%)</title><rect x="24.6693%" y="85" width="0.1193%" height="15" fill="rgb(237,122,38)" fg:x="2275" fg:w="11"/><text x="24.9193%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="24.7777%" y="69" width="0.0108%" height="15" fill="rgb(244,218,35)" fg:x="2285" fg:w="1"/><text x="25.0277%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="24.8211%" y="101" width="0.0217%" height="15" fill="rgb(240,68,47)" fg:x="2289" fg:w="2"/><text x="25.0711%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="24.8211%" y="85" width="0.0217%" height="15" fill="rgb(210,16,53)" fg:x="2289" fg:w="2"/><text x="25.0711%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="24.8428%" y="101" width="0.0217%" height="15" fill="rgb(235,124,12)" fg:x="2291" fg:w="2"/><text x="25.0928%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.11%)</title><rect x="24.7885%" y="117" width="0.1084%" height="15" fill="rgb(224,169,11)" fg:x="2286" fg:w="10"/><text x="25.0385%" y="127.50"></text></g><g><title>core::ptr::write (3 samples, 0.03%)</title><rect x="24.8645%" y="101" width="0.0325%" height="15" fill="rgb(250,166,2)" fg:x="2293" fg:w="3"/><text x="25.1145%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (19 samples, 0.21%)</title><rect x="24.8970%" y="117" width="0.2060%" height="15" fill="rgb(242,216,29)" fg:x="2296" fg:w="19"/><text x="25.1470%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (12 samples, 0.13%)</title><rect x="24.9729%" y="101" width="0.1301%" height="15" fill="rgb(230,116,27)" fg:x="2303" fg:w="12"/><text x="25.2229%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (12 samples, 0.13%)</title><rect x="24.9729%" y="85" width="0.1301%" height="15" fill="rgb(228,99,48)" fg:x="2303" fg:w="12"/><text x="25.2229%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.09%)</title><rect x="25.3416%" y="101" width="0.0867%" height="15" fill="rgb(253,11,6)" fg:x="2337" fg:w="8"/><text x="25.5916%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.04%)</title><rect x="25.3849%" y="85" width="0.0434%" height="15" fill="rgb(247,143,39)" fg:x="2341" fg:w="4"/><text x="25.6349%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.04%)</title><rect x="25.3849%" y="69" width="0.0434%" height="15" fill="rgb(236,97,10)" fg:x="2341" fg:w="4"/><text x="25.6349%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.07%)</title><rect x="25.6235%" y="85" width="0.0651%" height="15" fill="rgb(233,208,19)" fg:x="2363" fg:w="6"/><text x="25.8735%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.07%)</title><rect x="25.6235%" y="69" width="0.0651%" height="15" fill="rgb(216,164,2)" fg:x="2363" fg:w="6"/><text x="25.8735%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="25.7645%" y="69" width="0.0217%" height="15" fill="rgb(220,129,5)" fg:x="2376" fg:w="2"/><text x="26.0145%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="25.7645%" y="53" width="0.0217%" height="15" fill="rgb(242,17,10)" fg:x="2376" fg:w="2"/><text x="26.0145%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="25.7645%" y="37" width="0.0217%" height="15" fill="rgb(242,107,0)" fg:x="2376" fg:w="2"/><text x="26.0145%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (24 samples, 0.26%)</title><rect x="25.7862%" y="69" width="0.2602%" height="15" fill="rgb(251,28,31)" fg:x="2378" fg:w="24"/><text x="26.0362%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (62 samples, 0.67%)</title><rect x="25.4283%" y="101" width="0.6723%" height="15" fill="rgb(233,223,10)" fg:x="2345" fg:w="62"/><text x="25.6783%" y="111.50"></text></g><g><title>dpll::dpll::find_unit::_{{closure}} (38 samples, 0.41%)</title><rect x="25.6886%" y="85" width="0.4121%" height="15" fill="rgb(215,21,27)" fg:x="2369" fg:w="38"/><text x="25.9386%" y="95.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (5 samples, 0.05%)</title><rect x="26.0464%" y="69" width="0.0542%" height="15" fill="rgb(232,23,21)" fg:x="2402" fg:w="5"/><text x="26.2964%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (27 samples, 0.29%)</title><rect x="26.1006%" y="101" width="0.2928%" height="15" fill="rgb(244,5,23)" fg:x="2407" fg:w="27"/><text x="26.3506%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (21 samples, 0.23%)</title><rect x="26.1657%" y="85" width="0.2277%" height="15" fill="rgb(226,81,46)" fg:x="2413" fg:w="21"/><text x="26.4157%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (21 samples, 0.23%)</title><rect x="26.1657%" y="69" width="0.2277%" height="15" fill="rgb(247,70,30)" fg:x="2413" fg:w="21"/><text x="26.4157%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (125 samples, 1.36%)</title><rect x="25.1030%" y="117" width="1.3555%" height="15" fill="rgb(212,68,19)" fg:x="2315" fg:w="125"/><text x="25.3530%" y="127.50"></text></g><g><title>log::max_level (6 samples, 0.07%)</title><rect x="26.3934%" y="101" width="0.0651%" height="15" fill="rgb(240,187,13)" fg:x="2434" fg:w="6"/><text x="26.6434%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.07%)</title><rect x="26.3934%" y="85" width="0.0651%" height="15" fill="rgb(223,113,26)" fg:x="2434" fg:w="6"/><text x="26.6434%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.05%)</title><rect x="26.4043%" y="69" width="0.0542%" height="15" fill="rgb(206,192,2)" fg:x="2435" fg:w="5"/><text x="26.6543%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (3 samples, 0.03%)</title><rect x="26.4585%" y="117" width="0.0325%" height="15" fill="rgb(241,108,4)" fg:x="2440" fg:w="3"/><text x="26.7085%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="26.4693%" y="101" width="0.0217%" height="15" fill="rgb(247,173,49)" fg:x="2441" fg:w="2"/><text x="26.7193%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.02%)</title><rect x="26.4693%" y="85" width="0.0217%" height="15" fill="rgb(224,114,35)" fg:x="2441" fg:w="2"/><text x="26.7193%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="26.4693%" y="69" width="0.0217%" height="15" fill="rgb(245,159,27)" fg:x="2441" fg:w="2"/><text x="26.7193%" y="79.50"></text></g><g><title>dpll::dpll::set_variable (447 samples, 4.85%)</title><rect x="21.6981%" y="133" width="4.8471%" height="15" fill="rgb(245,172,44)" fg:x="2001" fg:w="447"/><text x="21.9481%" y="143.50">dpll::..</text></g><g><title>log::max_level (5 samples, 0.05%)</title><rect x="26.4910%" y="117" width="0.0542%" height="15" fill="rgb(236,23,11)" fg:x="2443" fg:w="5"/><text x="26.7410%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.05%)</title><rect x="26.4910%" y="101" width="0.0542%" height="15" fill="rgb(205,117,38)" fg:x="2443" fg:w="5"/><text x="26.7410%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="26.5235%" y="85" width="0.0217%" height="15" fill="rgb(237,72,25)" fg:x="2446" fg:w="2"/><text x="26.7735%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (177 samples, 1.92%)</title><rect x="41.0648%" y="117" width="1.9193%" height="15" fill="rgb(244,70,9)" fg:x="3787" fg:w="177"/><text x="41.3148%" y="127.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (177 samples, 1.92%)</title><rect x="41.0648%" y="101" width="1.9193%" height="15" fill="rgb(217,125,39)" fg:x="3787" fg:w="177"/><text x="41.3148%" y="111.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (177 samples, 1.92%)</title><rect x="41.0648%" y="85" width="1.9193%" height="15" fill="rgb(235,36,10)" fg:x="3787" fg:w="177"/><text x="41.3148%" y="95.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (507 samples, 5.50%)</title><rect x="42.9842%" y="117" width="5.4977%" height="15" fill="rgb(251,123,47)" fg:x="3964" fg:w="507"/><text x="43.2342%" y="127.50">&lt;core::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (293 samples, 3.18%)</title><rect x="45.3047%" y="101" width="3.1772%" height="15" fill="rgb(221,13,13)" fg:x="4178" fg:w="293"/><text x="45.5547%" y="111.50">&lt;co..</text></g><g><title>dpll::dpll::undo_assignment (2,063 samples, 22.37%)</title><rect x="26.5452%" y="133" width="22.3704%" height="15" fill="rgb(238,131,9)" fg:x="2448" fg:w="2063"/><text x="26.7952%" y="143.50">dpll::dpll::undo_assignment</text></g><g><title>&lt;dpll::schemas::Value as core::clone::Clone&gt;::clone (40 samples, 0.43%)</title><rect x="48.4819%" y="117" width="0.4337%" height="15" fill="rgb(211,50,8)" fg:x="4471" fg:w="40"/><text x="48.7319%" y="127.50"></text></g><g><title>dpll::dpll::backtrack (2,926 samples, 31.73%)</title><rect x="17.6968%" y="149" width="31.7285%" height="15" fill="rgb(245,182,24)" fg:x="1632" fg:w="2926"/><text x="17.9468%" y="159.50">dpll::dpll::backtrack</text></g><g><title>log::max_level (47 samples, 0.51%)</title><rect x="48.9156%" y="133" width="0.5097%" height="15" fill="rgb(242,14,37)" fg:x="4511" fg:w="47"/><text x="49.1656%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (47 samples, 0.51%)</title><rect x="48.9156%" y="117" width="0.5097%" height="15" fill="rgb(246,228,12)" fg:x="4511" fg:w="47"/><text x="49.1656%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (47 samples, 0.51%)</title><rect x="48.9156%" y="101" width="0.5097%" height="15" fill="rgb(213,55,15)" fg:x="4511" fg:w="47"/><text x="49.1656%" y="111.50"></text></g><g><title>dpll::dpll::set_variable (15 samples, 0.16%)</title><rect x="49.4253%" y="149" width="0.1627%" height="15" fill="rgb(209,9,3)" fg:x="4558" fg:w="15"/><text x="49.6753%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (15 samples, 0.16%)</title><rect x="49.4253%" y="133" width="0.1627%" height="15" fill="rgb(230,59,30)" fg:x="4558" fg:w="15"/><text x="49.6753%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (15 samples, 0.16%)</title><rect x="49.4253%" y="117" width="0.1627%" height="15" fill="rgb(209,121,21)" fg:x="4558" fg:w="15"/><text x="49.6753%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy (15 samples, 0.16%)</title><rect x="49.4253%" y="101" width="0.1627%" height="15" fill="rgb(220,109,13)" fg:x="4558" fg:w="15"/><text x="49.6753%" y="111.50"></text></g><g><title>core::intrinsics::copy (15 samples, 0.16%)</title><rect x="49.4253%" y="85" width="0.1627%" height="15" fill="rgb(232,18,1)" fg:x="4558" fg:w="15"/><text x="49.6753%" y="95.50"></text></g><g><title>dpll::dpll::undo_assignment (15 samples, 0.16%)</title><rect x="49.4253%" y="69" width="0.1627%" height="15" fill="rgb(215,41,42)" fg:x="4558" fg:w="15"/><text x="49.6753%" y="79.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (11 samples, 0.12%)</title><rect x="58.0026%" y="117" width="0.1193%" height="15" fill="rgb(224,123,36)" fg:x="5349" fg:w="11"/><text x="58.2526%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (11 samples, 0.12%)</title><rect x="58.0026%" y="101" width="0.1193%" height="15" fill="rgb(240,125,3)" fg:x="5349" fg:w="11"/><text x="58.2526%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (11 samples, 0.12%)</title><rect x="58.0026%" y="85" width="0.1193%" height="15" fill="rgb(205,98,50)" fg:x="5349" fg:w="11"/><text x="58.2526%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.12%)</title><rect x="58.0026%" y="69" width="0.1193%" height="15" fill="rgb(205,185,37)" fg:x="5349" fg:w="11"/><text x="58.2526%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (15 samples, 0.16%)</title><rect x="58.1219%" y="117" width="0.1627%" height="15" fill="rgb(238,207,15)" fg:x="5360" fg:w="15"/><text x="58.3719%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.16%)</title><rect x="58.1219%" y="101" width="0.1627%" height="15" fill="rgb(213,199,42)" fg:x="5360" fg:w="15"/><text x="58.3719%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.16%)</title><rect x="58.1219%" y="85" width="0.1627%" height="15" fill="rgb(235,201,11)" fg:x="5360" fg:w="15"/><text x="58.3719%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (16 samples, 0.17%)</title><rect x="58.2845%" y="117" width="0.1735%" height="15" fill="rgb(207,46,11)" fg:x="5375" fg:w="16"/><text x="58.5345%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (16 samples, 0.17%)</title><rect x="58.2845%" y="101" width="0.1735%" height="15" fill="rgb(241,35,35)" fg:x="5375" fg:w="16"/><text x="58.5345%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (16 samples, 0.17%)</title><rect x="58.2845%" y="85" width="0.1735%" height="15" fill="rgb(243,32,47)" fg:x="5375" fg:w="16"/><text x="58.5345%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (120 samples, 1.30%)</title><rect x="59.1629%" y="101" width="1.3012%" height="15" fill="rgb(247,202,23)" fg:x="5456" fg:w="120"/><text x="59.4129%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 2.05%)</title><rect x="58.4580%" y="117" width="2.0494%" height="15" fill="rgb(219,102,11)" fg:x="5391" fg:w="189"/><text x="58.7080%" y="127.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.04%)</title><rect x="60.4641%" y="101" width="0.0434%" height="15" fill="rgb(243,110,44)" fg:x="5576" fg:w="4"/><text x="60.7141%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.04%)</title><rect x="60.4641%" y="85" width="0.0434%" height="15" fill="rgb(222,74,54)" fg:x="5576" fg:w="4"/><text x="60.7141%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.04%)</title><rect x="60.4641%" y="69" width="0.0434%" height="15" fill="rgb(216,99,12)" fg:x="5576" fg:w="4"/><text x="60.7141%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (4 samples, 0.04%)</title><rect x="60.8436%" y="85" width="0.0434%" height="15" fill="rgb(226,22,26)" fg:x="5611" fg:w="4"/><text x="61.0936%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.04%)</title><rect x="60.8436%" y="69" width="0.0434%" height="15" fill="rgb(217,163,10)" fg:x="5611" fg:w="4"/><text x="61.0936%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (40 samples, 0.43%)</title><rect x="60.8436%" y="101" width="0.4337%" height="15" fill="rgb(213,25,53)" fg:x="5611" fg:w="40"/><text x="61.0936%" y="111.50"></text></g><g><title>core::ptr::write (36 samples, 0.39%)</title><rect x="60.8870%" y="85" width="0.3904%" height="15" fill="rgb(252,105,26)" fg:x="5615" fg:w="36"/><text x="61.1370%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (8 samples, 0.09%)</title><rect x="61.2774%" y="101" width="0.0867%" height="15" fill="rgb(220,39,43)" fg:x="5651" fg:w="8"/><text x="61.5274%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (8 samples, 0.09%)</title><rect x="61.2774%" y="85" width="0.0867%" height="15" fill="rgb(229,68,48)" fg:x="5651" fg:w="8"/><text x="61.5274%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (8 samples, 0.09%)</title><rect x="61.2774%" y="69" width="0.0867%" height="15" fill="rgb(252,8,32)" fg:x="5651" fg:w="8"/><text x="61.5274%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (19 samples, 0.21%)</title><rect x="61.3641%" y="69" width="0.2060%" height="15" fill="rgb(223,20,43)" fg:x="5659" fg:w="19"/><text x="61.6141%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (102 samples, 1.11%)</title><rect x="60.5075%" y="117" width="1.1061%" height="15" fill="rgb(229,81,49)" fg:x="5580" fg:w="102"/><text x="60.7575%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (23 samples, 0.25%)</title><rect x="61.3641%" y="101" width="0.2494%" height="15" fill="rgb(236,28,36)" fg:x="5659" fg:w="23"/><text x="61.6141%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (23 samples, 0.25%)</title><rect x="61.3641%" y="85" width="0.2494%" height="15" fill="rgb(249,185,26)" fg:x="5659" fg:w="23"/><text x="61.6141%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.04%)</title><rect x="61.5702%" y="69" width="0.0434%" height="15" fill="rgb(249,174,33)" fg:x="5678" fg:w="4"/><text x="61.8202%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.12%)</title><rect x="61.7762%" y="101" width="0.1193%" height="15" fill="rgb(233,201,37)" fg:x="5697" fg:w="11"/><text x="62.0262%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.12%)</title><rect x="61.7762%" y="85" width="0.1193%" height="15" fill="rgb(221,78,26)" fg:x="5697" fg:w="11"/><text x="62.0262%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (48 samples, 0.52%)</title><rect x="61.6135%" y="117" width="0.5205%" height="15" fill="rgb(250,127,30)" fg:x="5682" fg:w="48"/><text x="61.8635%" y="127.50"></text></g><g><title>core::ptr::write (22 samples, 0.24%)</title><rect x="61.8955%" y="101" width="0.2386%" height="15" fill="rgb(230,49,44)" fg:x="5708" fg:w="22"/><text x="62.1455%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (67 samples, 0.73%)</title><rect x="62.1340%" y="117" width="0.7265%" height="15" fill="rgb(229,67,23)" fg:x="5730" fg:w="67"/><text x="62.3840%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (37 samples, 0.40%)</title><rect x="62.4593%" y="101" width="0.4012%" height="15" fill="rgb(249,83,47)" fg:x="5760" fg:w="37"/><text x="62.7093%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (37 samples, 0.40%)</title><rect x="62.4593%" y="85" width="0.4012%" height="15" fill="rgb(215,43,3)" fg:x="5760" fg:w="37"/><text x="62.7093%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.16%)</title><rect x="63.6955%" y="101" width="0.1627%" height="15" fill="rgb(238,154,13)" fg:x="5874" fg:w="15"/><text x="63.9455%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6 samples, 0.07%)</title><rect x="63.7931%" y="85" width="0.0651%" height="15" fill="rgb(219,56,2)" fg:x="5883" fg:w="6"/><text x="64.0431%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.07%)</title><rect x="63.7931%" y="69" width="0.0651%" height="15" fill="rgb(233,0,4)" fg:x="5883" fg:w="6"/><text x="64.0431%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.29%)</title><rect x="64.4437%" y="85" width="0.2928%" height="15" fill="rgb(235,30,7)" fg:x="5943" fg:w="27"/><text x="64.6937%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (27 samples, 0.29%)</title><rect x="64.4437%" y="69" width="0.2928%" height="15" fill="rgb(250,79,13)" fg:x="5943" fg:w="27"/><text x="64.6937%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.17%)</title><rect x="65.1702%" y="69" width="0.1735%" height="15" fill="rgb(211,146,34)" fg:x="6010" fg:w="16"/><text x="65.4202%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.17%)</title><rect x="65.1702%" y="53" width="0.1735%" height="15" fill="rgb(228,22,38)" fg:x="6010" fg:w="16"/><text x="65.4202%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 0.17%)</title><rect x="65.1702%" y="37" width="0.1735%" height="15" fill="rgb(235,168,5)" fg:x="6010" fg:w="16"/><text x="65.4202%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (91 samples, 0.99%)</title><rect x="65.3437%" y="69" width="0.9868%" height="15" fill="rgb(221,155,16)" fg:x="6026" fg:w="91"/><text x="65.5937%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (246 samples, 2.67%)</title><rect x="63.8582%" y="101" width="2.6675%" height="15" fill="rgb(215,215,53)" fg:x="5889" fg:w="246"/><text x="64.1082%" y="111.50">&lt;c..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (165 samples, 1.79%)</title><rect x="64.7365%" y="85" width="1.7892%" height="15" fill="rgb(223,4,10)" fg:x="5970" fg:w="165"/><text x="64.9865%" y="95.50">d..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (18 samples, 0.20%)</title><rect x="66.3305%" y="69" width="0.1952%" height="15" fill="rgb(234,103,6)" fg:x="6117" fg:w="18"/><text x="66.5805%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (79 samples, 0.86%)</title><rect x="66.5257%" y="101" width="0.8566%" height="15" fill="rgb(227,97,0)" fg:x="6135" fg:w="79"/><text x="66.7757%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (62 samples, 0.67%)</title><rect x="66.7100%" y="85" width="0.6723%" height="15" fill="rgb(234,150,53)" fg:x="6152" fg:w="62"/><text x="66.9600%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (62 samples, 0.67%)</title><rect x="66.7100%" y="69" width="0.6723%" height="15" fill="rgb(228,201,54)" fg:x="6152" fg:w="62"/><text x="66.9600%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (443 samples, 4.80%)</title><rect x="62.8606%" y="117" width="4.8037%" height="15" fill="rgb(222,22,37)" fg:x="5797" fg:w="443"/><text x="63.1106%" y="127.50">dpll::..</text></g><g><title>log::max_level (26 samples, 0.28%)</title><rect x="67.3823%" y="101" width="0.2819%" height="15" fill="rgb(237,53,32)" fg:x="6214" fg:w="26"/><text x="67.6323%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.28%)</title><rect x="67.3823%" y="85" width="0.2819%" height="15" fill="rgb(233,25,53)" fg:x="6214" fg:w="26"/><text x="67.6323%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.10%)</title><rect x="67.5667%" y="69" width="0.0976%" height="15" fill="rgb(210,40,34)" fg:x="6231" fg:w="9"/><text x="67.8167%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (15 samples, 0.16%)</title><rect x="67.6643%" y="117" width="0.1627%" height="15" fill="rgb(241,220,44)" fg:x="6240" fg:w="15"/><text x="67.9143%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.03%)</title><rect x="67.7944%" y="101" width="0.0325%" height="15" fill="rgb(235,28,35)" fg:x="6252" fg:w="3"/><text x="68.0444%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.03%)</title><rect x="67.7944%" y="85" width="0.0325%" height="15" fill="rgb(210,56,17)" fg:x="6252" fg:w="3"/><text x="68.0444%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.03%)</title><rect x="67.7944%" y="69" width="0.0325%" height="15" fill="rgb(224,130,29)" fg:x="6252" fg:w="3"/><text x="68.0444%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_false (1,714 samples, 18.59%)</title><rect x="49.5879%" y="149" width="18.5860%" height="15" fill="rgb(235,212,8)" fg:x="4573" fg:w="1714"/><text x="49.8379%" y="159.50">dpll::dpll::set_variable_false</text></g><g><title>dpll::dpll::set_variable (1,699 samples, 18.42%)</title><rect x="49.7506%" y="133" width="18.4233%" height="15" fill="rgb(223,33,50)" fg:x="4588" fg:w="1699"/><text x="50.0006%" y="143.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (32 samples, 0.35%)</title><rect x="67.8269%" y="117" width="0.3470%" height="15" fill="rgb(219,149,13)" fg:x="6255" fg:w="32"/><text x="68.0769%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32 samples, 0.35%)</title><rect x="67.8269%" y="101" width="0.3470%" height="15" fill="rgb(250,156,29)" fg:x="6255" fg:w="32"/><text x="68.0769%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.16%)</title><rect x="68.0113%" y="85" width="0.1627%" height="15" fill="rgb(216,193,19)" fg:x="6272" fg:w="15"/><text x="68.2613%" y="95.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (24 samples, 0.26%)</title><rect x="81.2839%" y="117" width="0.2602%" height="15" fill="rgb(216,135,14)" fg:x="7496" fg:w="24"/><text x="81.5339%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (24 samples, 0.26%)</title><rect x="81.2839%" y="101" width="0.2602%" height="15" fill="rgb(241,47,5)" fg:x="7496" fg:w="24"/><text x="81.5339%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (24 samples, 0.26%)</title><rect x="81.2839%" y="85" width="0.2602%" height="15" fill="rgb(233,42,35)" fg:x="7496" fg:w="24"/><text x="81.5339%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (24 samples, 0.26%)</title><rect x="81.2839%" y="69" width="0.2602%" height="15" fill="rgb(231,13,6)" fg:x="7496" fg:w="24"/><text x="81.5339%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (22 samples, 0.24%)</title><rect x="81.5441%" y="117" width="0.2386%" height="15" fill="rgb(207,181,40)" fg:x="7520" fg:w="22"/><text x="81.7941%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (22 samples, 0.24%)</title><rect x="81.5441%" y="101" width="0.2386%" height="15" fill="rgb(254,173,49)" fg:x="7520" fg:w="22"/><text x="81.7941%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (22 samples, 0.24%)</title><rect x="81.5441%" y="85" width="0.2386%" height="15" fill="rgb(221,1,38)" fg:x="7520" fg:w="22"/><text x="81.7941%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (33 samples, 0.36%)</title><rect x="81.7827%" y="117" width="0.3578%" height="15" fill="rgb(206,124,46)" fg:x="7542" fg:w="33"/><text x="82.0327%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (33 samples, 0.36%)</title><rect x="81.7827%" y="101" width="0.3578%" height="15" fill="rgb(249,21,11)" fg:x="7542" fg:w="33"/><text x="82.0327%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (33 samples, 0.36%)</title><rect x="81.7827%" y="85" width="0.3578%" height="15" fill="rgb(222,201,40)" fg:x="7542" fg:w="33"/><text x="82.0327%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (219 samples, 2.37%)</title><rect x="82.9430%" y="101" width="2.3748%" height="15" fill="rgb(235,61,29)" fg:x="7649" fg:w="219"/><text x="83.1930%" y="111.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (303 samples, 3.29%)</title><rect x="82.1405%" y="117" width="3.2856%" height="15" fill="rgb(219,207,3)" fg:x="7575" fg:w="303"/><text x="82.3905%" y="127.50">&lt;co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (10 samples, 0.11%)</title><rect x="85.3177%" y="101" width="0.1084%" height="15" fill="rgb(222,56,46)" fg:x="7868" fg:w="10"/><text x="85.5677%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (10 samples, 0.11%)</title><rect x="85.3177%" y="85" width="0.1084%" height="15" fill="rgb(239,76,54)" fg:x="7868" fg:w="10"/><text x="85.5677%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (10 samples, 0.11%)</title><rect x="85.3177%" y="69" width="0.1084%" height="15" fill="rgb(231,124,27)" fg:x="7868" fg:w="10"/><text x="85.5677%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (5 samples, 0.05%)</title><rect x="85.8491%" y="85" width="0.0542%" height="15" fill="rgb(249,195,6)" fg:x="7917" fg:w="5"/><text x="86.0991%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.05%)</title><rect x="85.8491%" y="69" width="0.0542%" height="15" fill="rgb(237,174,47)" fg:x="7917" fg:w="5"/><text x="86.0991%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (81 samples, 0.88%)</title><rect x="85.8491%" y="101" width="0.8783%" height="15" fill="rgb(206,201,31)" fg:x="7917" fg:w="81"/><text x="86.0991%" y="111.50"></text></g><g><title>core::ptr::write (76 samples, 0.82%)</title><rect x="85.9033%" y="85" width="0.8241%" height="15" fill="rgb(231,57,52)" fg:x="7922" fg:w="76"/><text x="86.1533%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (19 samples, 0.21%)</title><rect x="86.7274%" y="101" width="0.2060%" height="15" fill="rgb(248,177,22)" fg:x="7998" fg:w="19"/><text x="86.9774%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (19 samples, 0.21%)</title><rect x="86.7274%" y="85" width="0.2060%" height="15" fill="rgb(215,211,37)" fg:x="7998" fg:w="19"/><text x="86.9774%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (19 samples, 0.21%)</title><rect x="86.7274%" y="69" width="0.2060%" height="15" fill="rgb(241,128,51)" fg:x="7998" fg:w="19"/><text x="86.9774%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (42 samples, 0.46%)</title><rect x="86.9334%" y="69" width="0.4554%" height="15" fill="rgb(227,165,31)" fg:x="8017" fg:w="42"/><text x="87.1834%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (185 samples, 2.01%)</title><rect x="85.4262%" y="117" width="2.0061%" height="15" fill="rgb(228,167,24)" fg:x="7878" fg:w="185"/><text x="85.6762%" y="127.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (46 samples, 0.50%)</title><rect x="86.9334%" y="101" width="0.4988%" height="15" fill="rgb(228,143,12)" fg:x="8017" fg:w="46"/><text x="87.1834%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (46 samples, 0.50%)</title><rect x="86.9334%" y="85" width="0.4988%" height="15" fill="rgb(249,149,8)" fg:x="8017" fg:w="46"/><text x="87.1834%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.04%)</title><rect x="87.3889%" y="69" width="0.0434%" height="15" fill="rgb(243,35,44)" fg:x="8059" fg:w="4"/><text x="87.6389%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="87.5840%" y="101" width="0.0217%" height="15" fill="rgb(246,89,9)" fg:x="8077" fg:w="2"/><text x="87.8340%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="87.5840%" y="85" width="0.0217%" height="15" fill="rgb(233,213,13)" fg:x="8077" fg:w="2"/><text x="87.8340%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (53 samples, 0.57%)</title><rect x="87.4322%" y="117" width="0.5747%" height="15" fill="rgb(233,141,41)" fg:x="8063" fg:w="53"/><text x="87.6822%" y="127.50"></text></g><g><title>core::ptr::write (37 samples, 0.40%)</title><rect x="87.6057%" y="101" width="0.4012%" height="15" fill="rgb(239,167,4)" fg:x="8079" fg:w="37"/><text x="87.8557%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (119 samples, 1.29%)</title><rect x="88.0069%" y="117" width="1.2904%" height="15" fill="rgb(209,217,16)" fg:x="8116" fg:w="119"/><text x="88.2569%" y="127.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (76 samples, 0.82%)</title><rect x="88.4732%" y="101" width="0.8241%" height="15" fill="rgb(219,88,35)" fg:x="8159" fg:w="76"/><text x="88.7232%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (76 samples, 0.82%)</title><rect x="88.4732%" y="85" width="0.8241%" height="15" fill="rgb(220,193,23)" fg:x="8159" fg:w="76"/><text x="88.7232%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.23%)</title><rect x="90.2407%" y="101" width="0.2277%" height="15" fill="rgb(230,90,52)" fg:x="8322" fg:w="21"/><text x="90.4907%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (11 samples, 0.12%)</title><rect x="90.3492%" y="85" width="0.1193%" height="15" fill="rgb(252,106,19)" fg:x="8332" fg:w="11"/><text x="90.5992%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.12%)</title><rect x="90.3492%" y="69" width="0.1193%" height="15" fill="rgb(206,74,20)" fg:x="8332" fg:w="11"/><text x="90.5992%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.51%)</title><rect x="91.3034%" y="85" width="0.5097%" height="15" fill="rgb(230,138,44)" fg:x="8420" fg:w="47"/><text x="91.5534%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (47 samples, 0.51%)</title><rect x="91.3034%" y="69" width="0.5097%" height="15" fill="rgb(235,182,43)" fg:x="8420" fg:w="47"/><text x="91.5534%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.25%)</title><rect x="92.5396%" y="69" width="0.2494%" height="15" fill="rgb(242,16,51)" fg:x="8534" fg:w="23"/><text x="92.7896%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (23 samples, 0.25%)</title><rect x="92.5396%" y="53" width="0.2494%" height="15" fill="rgb(248,9,4)" fg:x="8534" fg:w="23"/><text x="92.7896%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (23 samples, 0.25%)</title><rect x="92.5396%" y="37" width="0.2494%" height="15" fill="rgb(210,31,22)" fg:x="8534" fg:w="23"/><text x="92.7896%" y="47.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (155 samples, 1.68%)</title><rect x="92.7890%" y="69" width="1.6808%" height="15" fill="rgb(239,54,39)" fg:x="8557" fg:w="155"/><text x="93.0390%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (423 samples, 4.59%)</title><rect x="90.4684%" y="101" width="4.5869%" height="15" fill="rgb(230,99,41)" fg:x="8343" fg:w="423"/><text x="90.7184%" y="111.50">&lt;core..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (299 samples, 3.24%)</title><rect x="91.8131%" y="85" width="3.2422%" height="15" fill="rgb(253,106,12)" fg:x="8467" fg:w="299"/><text x="92.0631%" y="95.50">dpl..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (54 samples, 0.59%)</title><rect x="94.4697%" y="69" width="0.5856%" height="15" fill="rgb(213,46,41)" fg:x="8712" fg:w="54"/><text x="94.7197%" y="79.50"></text></g><g><title>core::cmp::PartialOrd::le (111 samples, 1.20%)</title><rect x="95.0553%" y="101" width="1.2036%" height="15" fill="rgb(215,133,35)" fg:x="8766" fg:w="111"/><text x="95.3053%" y="111.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (94 samples, 1.02%)</title><rect x="95.2396%" y="85" width="1.0193%" height="15" fill="rgb(213,28,5)" fg:x="8783" fg:w="94"/><text x="95.4896%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (94 samples, 1.02%)</title><rect x="95.2396%" y="69" width="1.0193%" height="15" fill="rgb(215,77,49)" fg:x="8783" fg:w="94"/><text x="95.4896%" y="79.50"></text></g><g><title>dpll::dpll::find_unit (681 samples, 7.38%)</title><rect x="89.2973%" y="117" width="7.3845%" height="15" fill="rgb(248,100,22)" fg:x="8235" fg:w="681"/><text x="89.5473%" y="127.50">dpll::dpll..</text></g><g><title>log::max_level (39 samples, 0.42%)</title><rect x="96.2589%" y="101" width="0.4229%" height="15" fill="rgb(208,67,9)" fg:x="8877" fg:w="39"/><text x="96.5089%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (39 samples, 0.42%)</title><rect x="96.2589%" y="85" width="0.4229%" height="15" fill="rgb(219,133,21)" fg:x="8877" fg:w="39"/><text x="96.5089%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.17%)</title><rect x="96.5083%" y="69" width="0.1735%" height="15" fill="rgb(246,46,29)" fg:x="8900" fg:w="16"/><text x="96.7583%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (32 samples, 0.35%)</title><rect x="96.6818%" y="117" width="0.3470%" height="15" fill="rgb(246,185,52)" fg:x="8916" fg:w="32"/><text x="96.9318%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (18 samples, 0.20%)</title><rect x="96.8337%" y="101" width="0.1952%" height="15" fill="rgb(252,136,11)" fg:x="8930" fg:w="18"/><text x="97.0837%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (18 samples, 0.20%)</title><rect x="96.8337%" y="85" width="0.1952%" height="15" fill="rgb(219,138,53)" fg:x="8930" fg:w="18"/><text x="97.0837%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (18 samples, 0.20%)</title><rect x="96.8337%" y="69" width="0.1952%" height="15" fill="rgb(211,51,23)" fg:x="8930" fg:w="18"/><text x="97.0837%" y="79.50"></text></g><g><title>dpll::dpll::set_variable_true (2,709 samples, 29.38%)</title><rect x="68.1739%" y="149" width="29.3754%" height="15" fill="rgb(247,221,28)" fg:x="6287" fg:w="2709"/><text x="68.4239%" y="159.50">dpll::dpll::set_variable_true</text></g><g><title>dpll::dpll::set_variable (2,680 samples, 29.06%)</title><rect x="68.4884%" y="133" width="29.0609%" height="15" fill="rgb(251,222,45)" fg:x="6316" fg:w="2680"/><text x="68.7384%" y="143.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (48 samples, 0.52%)</title><rect x="97.0288%" y="117" width="0.5205%" height="15" fill="rgb(217,162,53)" fg:x="8948" fg:w="48"/><text x="97.2788%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.52%)</title><rect x="97.0288%" y="101" width="0.5205%" height="15" fill="rgb(229,93,14)" fg:x="8948" fg:w="48"/><text x="97.2788%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.13%)</title><rect x="97.4192%" y="85" width="0.1301%" height="15" fill="rgb(209,67,49)" fg:x="8984" fg:w="12"/><text x="97.6692%" y="95.50"></text></g><g><title>_start (8,621 samples, 93.48%)</title><rect x="4.1856%" y="309" width="93.4830%" height="15" fill="rgb(213,87,29)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="319.50">_start</text></g><g><title>__libc_start_main (8,621 samples, 93.48%)</title><rect x="4.1856%" y="293" width="93.4830%" height="15" fill="rgb(205,151,52)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="303.50">__libc_start_main</text></g><g><title>[libc.so.6] (8,621 samples, 93.48%)</title><rect x="4.1856%" y="277" width="93.4830%" height="15" fill="rgb(253,215,39)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="287.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (8,621 samples, 93.48%)</title><rect x="4.1856%" y="261" width="93.4830%" height="15" fill="rgb(221,220,41)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="271.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (8,621 samples, 93.48%)</title><rect x="4.1856%" y="245" width="93.4830%" height="15" fill="rgb(218,133,21)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="255.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (8,621 samples, 93.48%)</title><rect x="4.1856%" y="229" width="93.4830%" height="15" fill="rgb(221,193,43)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="239.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,621 samples, 93.48%)</title><rect x="4.1856%" y="213" width="93.4830%" height="15" fill="rgb(240,128,52)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="223.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,621 samples, 93.48%)</title><rect x="4.1856%" y="197" width="93.4830%" height="15" fill="rgb(253,114,12)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="207.50">core::ops::function::FnOnce::call_once</text></g><g><title>dpll::main (8,621 samples, 93.48%)</title><rect x="4.1856%" y="181" width="93.4830%" height="15" fill="rgb(215,223,47)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="191.50">dpll::main</text></g><g><title>dpll::dpll::dpll (8,621 samples, 93.48%)</title><rect x="4.1856%" y="165" width="93.4830%" height="15" fill="rgb(248,225,23)" fg:x="386" fg:w="8621"/><text x="4.4356%" y="175.50">dpll::dpll::dpll</text></g><g><title>log::max_level (11 samples, 0.12%)</title><rect x="97.5493%" y="149" width="0.1193%" height="15" fill="rgb(250,108,0)" fg:x="8996" fg:w="11"/><text x="97.7993%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (11 samples, 0.12%)</title><rect x="97.5493%" y="133" width="0.1193%" height="15" fill="rgb(228,208,7)" fg:x="8996" fg:w="11"/><text x="97.7993%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.12%)</title><rect x="97.5493%" y="117" width="0.1193%" height="15" fill="rgb(244,45,10)" fg:x="8996" fg:w="11"/><text x="97.7993%" y="127.50"></text></g><g><title>dpll::dpll::backtrack (49 samples, 0.53%)</title><rect x="97.6686%" y="293" width="0.5313%" height="15" fill="rgb(207,125,25)" fg:x="9007" fg:w="49"/><text x="97.9186%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 0.07%)</title><rect x="98.1349%" y="277" width="0.0651%" height="15" fill="rgb(210,195,18)" fg:x="9050" fg:w="6"/><text x="98.3849%" y="287.50"></text></g><g><title>dpll::dpll::find_unit (39 samples, 0.42%)</title><rect x="98.2000%" y="293" width="0.4229%" height="15" fill="rgb(249,80,12)" fg:x="9056" fg:w="39"/><text x="98.4500%" y="303.50"></text></g><g><title>all (9,222 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="9222"/><text x="0.2500%" y="351.50"></text></g><g><title>dpll (9,222 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="9222"/><text x="0.2500%" y="335.50">dpll</text></g><g><title>log::STATE (215 samples, 2.33%)</title><rect x="97.6686%" y="309" width="2.3314%" height="15" fill="rgb(225,32,20)" fg:x="9007" fg:w="215"/><text x="97.9186%" y="319.50">l..</text></g><g><title>dpll::dpll::set_variable (127 samples, 1.38%)</title><rect x="98.6229%" y="293" width="1.3771%" height="15" fill="rgb(215,141,46)" fg:x="9095" fg:w="127"/><text x="98.8729%" y="303.50"></text></g></svg></svg>