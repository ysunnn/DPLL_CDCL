<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="5760"><g><title>dpll::dpll::find_unit (12 samples, 0.21%)</title><rect x="0.0000%" y="325" width="0.2083%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12"/><text x="0.2500%" y="335.50"></text></g><g><title>dpll::dpll::set_variable (1 samples, 0.02%)</title><rect x="0.2083%" y="325" width="0.0174%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="1"/><text x="0.4583%" y="335.50"></text></g><g><title>[[heap]] (14 samples, 0.24%)</title><rect x="0.0000%" y="341" width="0.2431%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="14"/><text x="0.2500%" y="351.50"></text></g><g><title>dpll::dpll::undo_assignment (1 samples, 0.02%)</title><rect x="0.2257%" y="325" width="0.0174%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="1"/><text x="0.4757%" y="335.50"></text></g><g><title>dpll::dpll::find_unit (43 samples, 0.75%)</title><rect x="0.2431%" y="325" width="0.7465%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="43"/><text x="0.4931%" y="335.50"></text></g><g><title>[[stack]] (58 samples, 1.01%)</title><rect x="0.2431%" y="341" width="1.0069%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="58"/><text x="0.4931%" y="351.50"></text></g><g><title>dpll::dpll::undo_assignment (15 samples, 0.26%)</title><rect x="0.9896%" y="325" width="0.2604%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="15"/><text x="1.2396%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.12%)</title><rect x="1.2500%" y="341" width="0.1215%" height="15" fill="rgb(228,23,34)" fg:x="72" fg:w="7"/><text x="1.5000%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="1.3368%" y="325" width="0.0347%" height="15" fill="rgb(218,30,26)" fg:x="77" fg:w="2"/><text x="1.5868%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="1.3368%" y="309" width="0.0347%" height="15" fill="rgb(220,122,19)" fg:x="77" fg:w="2"/><text x="1.5868%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="1.3368%" y="293" width="0.0347%" height="15" fill="rgb(250,228,42)" fg:x="77" fg:w="2"/><text x="1.5868%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3542%" y="277" width="0.0174%" height="15" fill="rgb(240,193,28)" fg:x="78" fg:w="1"/><text x="1.6042%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3542%" y="261" width="0.0174%" height="15" fill="rgb(216,20,37)" fg:x="78" fg:w="1"/><text x="1.6042%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="1.3542%" y="245" width="0.0174%" height="15" fill="rgb(206,188,39)" fg:x="78" fg:w="1"/><text x="1.6042%" y="255.50"></text></g><g><title>[dpll] (1 samples, 0.02%)</title><rect x="1.3715%" y="325" width="0.0174%" height="15" fill="rgb(217,207,13)" fg:x="79" fg:w="1"/><text x="1.6215%" y="335.50"></text></g><g><title>dpll::dpll::set_variable (1 samples, 0.02%)</title><rect x="1.3715%" y="309" width="0.0174%" height="15" fill="rgb(231,73,38)" fg:x="79" fg:w="1"/><text x="1.6215%" y="319.50"></text></g><g><title>dpll::dpll::backtrack (7 samples, 0.12%)</title><rect x="1.3889%" y="325" width="0.1215%" height="15" fill="rgb(225,20,46)" fg:x="80" fg:w="7"/><text x="1.6389%" y="335.50"></text></g><g><title>dpll::dpll::set_variable_false (10 samples, 0.17%)</title><rect x="1.5451%" y="309" width="0.1736%" height="15" fill="rgb(210,31,41)" fg:x="89" fg:w="10"/><text x="1.7951%" y="319.50"></text></g><g><title>dpll::dpll::dpll (29 samples, 0.50%)</title><rect x="1.5104%" y="325" width="0.5035%" height="15" fill="rgb(221,200,47)" fg:x="87" fg:w="29"/><text x="1.7604%" y="335.50"></text></g><g><title>dpll::dpll::set_variable_true (17 samples, 0.30%)</title><rect x="1.7188%" y="309" width="0.2951%" height="15" fill="rgb(226,26,5)" fg:x="99" fg:w="17"/><text x="1.9688%" y="319.50"></text></g><g><title>dpll::dpll::set_variable (99 samples, 1.72%)</title><rect x="2.0139%" y="325" width="1.7188%" height="15" fill="rgb(249,33,26)" fg:x="116" fg:w="99"/><text x="2.2639%" y="335.50"></text></g><g><title>[unknown] (166 samples, 2.88%)</title><rect x="1.3715%" y="341" width="2.8819%" height="15" fill="rgb(235,183,28)" fg:x="79" fg:w="166"/><text x="1.6215%" y="351.50">[u..</text></g><g><title>dpll::dpll::undo_assignment (30 samples, 0.52%)</title><rect x="3.7326%" y="325" width="0.5208%" height="15" fill="rgb(221,5,38)" fg:x="215" fg:w="30"/><text x="3.9826%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;dpll::schemas::Formula&gt; (1 samples, 0.02%)</title><rect x="4.2535%" y="197" width="0.0174%" height="15" fill="rgb(247,18,42)" fg:x="245" fg:w="1"/><text x="4.5035%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;dpll::schemas::Variable&gt;&gt; (1 samples, 0.02%)</title><rect x="4.2535%" y="181" width="0.0174%" height="15" fill="rgb(241,131,45)" fg:x="245" fg:w="1"/><text x="4.5035%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="4.2535%" y="165" width="0.0174%" height="15" fill="rgb(249,31,29)" fg:x="245" fg:w="1"/><text x="4.5035%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;[dpll::schemas::Variable]&gt; (1 samples, 0.02%)</title><rect x="4.2535%" y="149" width="0.0174%" height="15" fill="rgb(225,111,53)" fg:x="245" fg:w="1"/><text x="4.5035%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;dpll::schemas::Variable&gt; (1 samples, 0.02%)</title><rect x="4.2535%" y="133" width="0.0174%" height="15" fill="rgb(238,160,17)" fg:x="245" fg:w="1"/><text x="4.5035%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="4.2535%" y="117" width="0.0174%" height="15" fill="rgb(214,148,48)" fg:x="245" fg:w="1"/><text x="4.5035%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="4.2535%" y="101" width="0.0174%" height="15" fill="rgb(232,36,49)" fg:x="245" fg:w="1"/><text x="4.5035%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="4.2535%" y="85" width="0.0174%" height="15" fill="rgb(209,103,24)" fg:x="245" fg:w="1"/><text x="4.5035%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="4.2535%" y="69" width="0.0174%" height="15" fill="rgb(229,88,8)" fg:x="245" fg:w="1"/><text x="4.5035%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="4.2535%" y="53" width="0.0174%" height="15" fill="rgb(213,181,19)" fg:x="245" fg:w="1"/><text x="4.5035%" y="63.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="4.2535%" y="37" width="0.0174%" height="15" fill="rgb(254,191,54)" fg:x="245" fg:w="1"/><text x="4.5035%" y="47.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.28%)</title><rect x="9.8958%" y="181" width="0.2778%" height="15" fill="rgb(241,83,37)" fg:x="570" fg:w="16"/><text x="10.1458%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (16 samples, 0.28%)</title><rect x="9.8958%" y="165" width="0.2778%" height="15" fill="rgb(233,36,39)" fg:x="570" fg:w="16"/><text x="10.1458%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (16 samples, 0.28%)</title><rect x="9.8958%" y="149" width="0.2778%" height="15" fill="rgb(226,3,54)" fg:x="570" fg:w="16"/><text x="10.1458%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (55 samples, 0.95%)</title><rect x="10.1736%" y="181" width="0.9549%" height="15" fill="rgb(245,192,40)" fg:x="586" fg:w="55"/><text x="10.4236%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (55 samples, 0.95%)</title><rect x="10.1736%" y="165" width="0.9549%" height="15" fill="rgb(238,167,29)" fg:x="586" fg:w="55"/><text x="10.4236%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (55 samples, 0.95%)</title><rect x="10.1736%" y="149" width="0.9549%" height="15" fill="rgb(232,182,51)" fg:x="586" fg:w="55"/><text x="10.4236%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (5 samples, 0.09%)</title><rect x="11.9792%" y="149" width="0.0868%" height="15" fill="rgb(231,60,39)" fg:x="690" fg:w="5"/><text x="12.2292%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.09%)</title><rect x="11.9792%" y="133" width="0.0868%" height="15" fill="rgb(208,69,12)" fg:x="690" fg:w="5"/><text x="12.2292%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (6 samples, 0.10%)</title><rect x="11.9792%" y="165" width="0.1042%" height="15" fill="rgb(235,93,37)" fg:x="690" fg:w="6"/><text x="12.2292%" y="175.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="12.0660%" y="149" width="0.0174%" height="15" fill="rgb(213,116,39)" fg:x="695" fg:w="1"/><text x="12.3160%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (10 samples, 0.17%)</title><rect x="12.0833%" y="165" width="0.1736%" height="15" fill="rgb(222,207,29)" fg:x="696" fg:w="10"/><text x="12.3333%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (57 samples, 0.99%)</title><rect x="12.2569%" y="133" width="0.9896%" height="15" fill="rgb(206,96,30)" fg:x="706" fg:w="57"/><text x="12.5069%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (127 samples, 2.20%)</title><rect x="11.1285%" y="181" width="2.2049%" height="15" fill="rgb(218,138,4)" fg:x="641" fg:w="127"/><text x="11.3785%" y="191.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (62 samples, 1.08%)</title><rect x="12.2569%" y="165" width="1.0764%" height="15" fill="rgb(250,191,14)" fg:x="706" fg:w="62"/><text x="12.5069%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (62 samples, 1.08%)</title><rect x="12.2569%" y="149" width="1.0764%" height="15" fill="rgb(239,60,40)" fg:x="706" fg:w="62"/><text x="12.5069%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (5 samples, 0.09%)</title><rect x="13.2465%" y="133" width="0.0868%" height="15" fill="rgb(206,27,48)" fg:x="763" fg:w="5"/><text x="13.4965%" y="143.50"></text></g><g><title>core::cmp::PartialEq::ne (241 samples, 4.18%)</title><rect x="13.3333%" y="181" width="4.1840%" height="15" fill="rgb(225,35,8)" fg:x="768" fg:w="241"/><text x="13.5833%" y="191.50">core:..</text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (241 samples, 4.18%)</title><rect x="13.3333%" y="165" width="4.1840%" height="15" fill="rgb(250,213,24)" fg:x="768" fg:w="241"/><text x="13.5833%" y="175.50">&lt;dpll..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (26 samples, 0.45%)</title><rect x="17.5174%" y="181" width="0.4514%" height="15" fill="rgb(247,123,22)" fg:x="1009" fg:w="26"/><text x="17.7674%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.02%)</title><rect x="17.9688%" y="181" width="0.0174%" height="15" fill="rgb(231,138,38)" fg:x="1035" fg:w="1"/><text x="18.2188%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="17.9688%" y="165" width="0.0174%" height="15" fill="rgb(231,145,46)" fg:x="1035" fg:w="1"/><text x="18.2188%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (3 samples, 0.05%)</title><rect x="19.2882%" y="165" width="0.0521%" height="15" fill="rgb(251,118,11)" fg:x="1111" fg:w="3"/><text x="19.5382%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (3 samples, 0.05%)</title><rect x="19.2882%" y="149" width="0.0521%" height="15" fill="rgb(217,147,25)" fg:x="1111" fg:w="3"/><text x="19.5382%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (10 samples, 0.17%)</title><rect x="19.9826%" y="149" width="0.1736%" height="15" fill="rgb(247,81,37)" fg:x="1151" fg:w="10"/><text x="20.2326%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.17%)</title><rect x="19.9826%" y="133" width="0.1736%" height="15" fill="rgb(209,12,38)" fg:x="1151" fg:w="10"/><text x="20.2326%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.05%)</title><rect x="20.1562%" y="149" width="0.0521%" height="15" fill="rgb(227,1,9)" fg:x="1161" fg:w="3"/><text x="20.4062%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (75 samples, 1.30%)</title><rect x="19.3403%" y="165" width="1.3021%" height="15" fill="rgb(248,47,43)" fg:x="1114" fg:w="75"/><text x="19.5903%" y="175.50"></text></g><g><title>core::ptr::read (25 samples, 0.43%)</title><rect x="20.2083%" y="149" width="0.4340%" height="15" fill="rgb(221,10,30)" fg:x="1164" fg:w="25"/><text x="20.4583%" y="159.50"></text></g><g><title>core::cmp::PartialOrd::le (89 samples, 1.55%)</title><rect x="20.6424%" y="165" width="1.5451%" height="15" fill="rgb(210,229,1)" fg:x="1189" fg:w="89"/><text x="20.8924%" y="175.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (60 samples, 1.04%)</title><rect x="21.1458%" y="149" width="1.0417%" height="15" fill="rgb(222,148,37)" fg:x="1218" fg:w="60"/><text x="21.3958%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (60 samples, 1.04%)</title><rect x="21.1458%" y="133" width="1.0417%" height="15" fill="rgb(234,67,33)" fg:x="1218" fg:w="60"/><text x="21.3958%" y="143.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.07%)</title><rect x="23.9757%" y="149" width="0.0694%" height="15" fill="rgb(247,98,35)" fg:x="1381" fg:w="4"/><text x="24.2257%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (4 samples, 0.07%)</title><rect x="23.9757%" y="133" width="0.0694%" height="15" fill="rgb(247,138,52)" fg:x="1381" fg:w="4"/><text x="24.2257%" y="143.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.07%)</title><rect x="23.9757%" y="117" width="0.0694%" height="15" fill="rgb(213,79,30)" fg:x="1381" fg:w="4"/><text x="24.2257%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.07%)</title><rect x="23.9757%" y="101" width="0.0694%" height="15" fill="rgb(246,177,23)" fg:x="1381" fg:w="4"/><text x="24.2257%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.07%)</title><rect x="24.0451%" y="149" width="0.0694%" height="15" fill="rgb(230,62,27)" fg:x="1385" fg:w="4"/><text x="24.2951%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.07%)</title><rect x="24.0451%" y="133" width="0.0694%" height="15" fill="rgb(216,154,8)" fg:x="1385" fg:w="4"/><text x="24.2951%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.07%)</title><rect x="24.0451%" y="117" width="0.0694%" height="15" fill="rgb(244,35,45)" fg:x="1385" fg:w="4"/><text x="24.2951%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.49%)</title><rect x="24.1146%" y="149" width="0.4861%" height="15" fill="rgb(251,115,12)" fg:x="1389" fg:w="28"/><text x="24.3646%" y="159.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (20 samples, 0.35%)</title><rect x="24.2535%" y="133" width="0.3472%" height="15" fill="rgb(240,54,50)" fg:x="1397" fg:w="20"/><text x="24.5035%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="24.7049%" y="117" width="0.0174%" height="15" fill="rgb(233,84,52)" fg:x="1423" fg:w="1"/><text x="24.9549%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="24.7049%" y="101" width="0.0174%" height="15" fill="rgb(207,117,47)" fg:x="1423" fg:w="1"/><text x="24.9549%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (7 samples, 0.12%)</title><rect x="24.7049%" y="133" width="0.1215%" height="15" fill="rgb(249,43,39)" fg:x="1423" fg:w="7"/><text x="24.9549%" y="143.50"></text></g><g><title>core::ptr::write (6 samples, 0.10%)</title><rect x="24.7222%" y="117" width="0.1042%" height="15" fill="rgb(209,38,44)" fg:x="1424" fg:w="6"/><text x="24.9722%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3 samples, 0.05%)</title><rect x="24.8264%" y="101" width="0.0521%" height="15" fill="rgb(236,212,23)" fg:x="1430" fg:w="3"/><text x="25.0764%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (19 samples, 0.33%)</title><rect x="24.6007%" y="149" width="0.3299%" height="15" fill="rgb(242,79,21)" fg:x="1417" fg:w="19"/><text x="24.8507%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (6 samples, 0.10%)</title><rect x="24.8264%" y="133" width="0.1042%" height="15" fill="rgb(211,96,35)" fg:x="1430" fg:w="6"/><text x="25.0764%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (6 samples, 0.10%)</title><rect x="24.8264%" y="117" width="0.1042%" height="15" fill="rgb(253,215,40)" fg:x="1430" fg:w="6"/><text x="25.0764%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (3 samples, 0.05%)</title><rect x="24.8785%" y="101" width="0.0521%" height="15" fill="rgb(211,81,21)" fg:x="1433" fg:w="3"/><text x="25.1285%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="25.0000%" y="133" width="0.0174%" height="15" fill="rgb(208,190,38)" fg:x="1440" fg:w="1"/><text x="25.2500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="25.0000%" y="117" width="0.0174%" height="15" fill="rgb(235,213,38)" fg:x="1440" fg:w="1"/><text x="25.2500%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.14%)</title><rect x="24.9306%" y="149" width="0.1389%" height="15" fill="rgb(237,122,38)" fg:x="1436" fg:w="8"/><text x="25.1806%" y="159.50"></text></g><g><title>core::ptr::write (3 samples, 0.05%)</title><rect x="25.0174%" y="133" width="0.0521%" height="15" fill="rgb(244,218,35)" fg:x="1441" fg:w="3"/><text x="25.2674%" y="143.50"></text></g><g><title>core::cmp::PartialOrd::le (11 samples, 0.19%)</title><rect x="25.0694%" y="149" width="0.1910%" height="15" fill="rgb(240,68,47)" fg:x="1444" fg:w="11"/><text x="25.3194%" y="159.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (7 samples, 0.12%)</title><rect x="25.1389%" y="133" width="0.1215%" height="15" fill="rgb(210,16,53)" fg:x="1448" fg:w="7"/><text x="25.3889%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (7 samples, 0.12%)</title><rect x="25.1389%" y="117" width="0.1215%" height="15" fill="rgb(235,124,12)" fg:x="1448" fg:w="7"/><text x="25.3889%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="25.4688%" y="133" width="0.0174%" height="15" fill="rgb(224,169,11)" fg:x="1467" fg:w="1"/><text x="25.7188%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="25.6250%" y="117" width="0.0694%" height="15" fill="rgb(250,166,2)" fg:x="1476" fg:w="4"/><text x="25.8750%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.07%)</title><rect x="25.6250%" y="101" width="0.0694%" height="15" fill="rgb(242,216,29)" fg:x="1476" fg:w="4"/><text x="25.8750%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="25.8333%" y="101" width="0.0174%" height="15" fill="rgb(230,116,27)" fg:x="1488" fg:w="1"/><text x="26.0833%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="25.8333%" y="85" width="0.0174%" height="15" fill="rgb(228,99,48)" fg:x="1488" fg:w="1"/><text x="26.0833%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="25.8333%" y="69" width="0.0174%" height="15" fill="rgb(253,11,6)" fg:x="1488" fg:w="1"/><text x="26.0833%" y="79.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (20 samples, 0.35%)</title><rect x="25.8507%" y="101" width="0.3472%" height="15" fill="rgb(247,143,39)" fg:x="1489" fg:w="20"/><text x="26.1007%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (50 samples, 0.87%)</title><rect x="25.4861%" y="133" width="0.8681%" height="15" fill="rgb(236,97,10)" fg:x="1468" fg:w="50"/><text x="25.7361%" y="143.50"></text></g><g><title>dpll::dpll::find_unit::_{{closure}} (38 samples, 0.66%)</title><rect x="25.6944%" y="117" width="0.6597%" height="15" fill="rgb(233,208,19)" fg:x="1480" fg:w="38"/><text x="25.9444%" y="127.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (9 samples, 0.16%)</title><rect x="26.1979%" y="101" width="0.1562%" height="15" fill="rgb(216,164,2)" fg:x="1509" fg:w="9"/><text x="26.4479%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (12 samples, 0.21%)</title><rect x="26.3542%" y="133" width="0.2083%" height="15" fill="rgb(220,129,5)" fg:x="1518" fg:w="12"/><text x="26.6042%" y="143.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (12 samples, 0.21%)</title><rect x="26.3542%" y="117" width="0.2083%" height="15" fill="rgb(242,17,10)" fg:x="1518" fg:w="12"/><text x="26.6042%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (12 samples, 0.21%)</title><rect x="26.3542%" y="101" width="0.2083%" height="15" fill="rgb(242,107,0)" fg:x="1518" fg:w="12"/><text x="26.6042%" y="111.50"></text></g><g><title>dpll::dpll::find_unit (84 samples, 1.46%)</title><rect x="25.2604%" y="149" width="1.4583%" height="15" fill="rgb(251,28,31)" fg:x="1455" fg:w="84"/><text x="25.5104%" y="159.50"></text></g><g><title>log::max_level (9 samples, 0.16%)</title><rect x="26.5625%" y="133" width="0.1562%" height="15" fill="rgb(233,223,10)" fg:x="1530" fg:w="9"/><text x="26.8125%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.16%)</title><rect x="26.5625%" y="117" width="0.1562%" height="15" fill="rgb(215,21,27)" fg:x="1530" fg:w="9"/><text x="26.8125%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="26.6840%" y="101" width="0.0347%" height="15" fill="rgb(232,23,21)" fg:x="1537" fg:w="2"/><text x="26.9340%" y="111.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (3 samples, 0.05%)</title><rect x="26.7188%" y="149" width="0.0521%" height="15" fill="rgb(244,5,23)" fg:x="1539" fg:w="3"/><text x="26.9688%" y="159.50"></text></g><g><title>dpll::dpll::set_variable (268 samples, 4.65%)</title><rect x="22.1875%" y="165" width="4.6528%" height="15" fill="rgb(226,81,46)" fg:x="1278" fg:w="268"/><text x="22.4375%" y="175.50">dpll:..</text></g><g><title>log::max_level (4 samples, 0.07%)</title><rect x="26.7708%" y="149" width="0.0694%" height="15" fill="rgb(247,70,30)" fg:x="1542" fg:w="4"/><text x="27.0208%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.07%)</title><rect x="26.7708%" y="133" width="0.0694%" height="15" fill="rgb(212,68,19)" fg:x="1542" fg:w="4"/><text x="27.0208%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.05%)</title><rect x="26.7882%" y="117" width="0.0521%" height="15" fill="rgb(240,187,13)" fg:x="1543" fg:w="3"/><text x="27.0382%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (122 samples, 2.12%)</title><rect x="41.3194%" y="149" width="2.1181%" height="15" fill="rgb(223,113,26)" fg:x="2380" fg:w="122"/><text x="41.5694%" y="159.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (122 samples, 2.12%)</title><rect x="41.3194%" y="133" width="2.1181%" height="15" fill="rgb(206,192,2)" fg:x="2380" fg:w="122"/><text x="41.5694%" y="143.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (122 samples, 2.12%)</title><rect x="41.3194%" y="117" width="2.1181%" height="15" fill="rgb(241,108,4)" fg:x="2380" fg:w="122"/><text x="41.5694%" y="127.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (303 samples, 5.26%)</title><rect x="43.4375%" y="149" width="5.2604%" height="15" fill="rgb(247,173,49)" fg:x="2502" fg:w="303"/><text x="43.6875%" y="159.50">&lt;core:..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (183 samples, 3.18%)</title><rect x="45.5208%" y="133" width="3.1771%" height="15" fill="rgb(224,114,35)" fg:x="2622" fg:w="183"/><text x="45.7708%" y="143.50">&lt;co..</text></g><g><title>dpll::dpll::undo_assignment (1,286 samples, 22.33%)</title><rect x="26.8403%" y="165" width="22.3264%" height="15" fill="rgb(245,159,27)" fg:x="1546" fg:w="1286"/><text x="27.0903%" y="175.50">dpll::dpll::undo_assignment</text></g><g><title>&lt;dpll::schemas::Value as core::clone::Clone&gt;::clone (27 samples, 0.47%)</title><rect x="48.6979%" y="149" width="0.4688%" height="15" fill="rgb(245,172,44)" fg:x="2805" fg:w="27"/><text x="48.9479%" y="159.50"></text></g><g><title>dpll::dpll::backtrack (1,831 samples, 31.79%)</title><rect x="17.9861%" y="181" width="31.7882%" height="15" fill="rgb(236,23,11)" fg:x="1036" fg:w="1831"/><text x="18.2361%" y="191.50">dpll::dpll::backtrack</text></g><g><title>log::max_level (35 samples, 0.61%)</title><rect x="49.1667%" y="165" width="0.6076%" height="15" fill="rgb(205,117,38)" fg:x="2832" fg:w="35"/><text x="49.4167%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.61%)</title><rect x="49.1667%" y="149" width="0.6076%" height="15" fill="rgb(237,72,25)" fg:x="2832" fg:w="35"/><text x="49.4167%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.61%)</title><rect x="49.1667%" y="133" width="0.6076%" height="15" fill="rgb(244,70,9)" fg:x="2832" fg:w="35"/><text x="49.4167%" y="143.50"></text></g><g><title>dpll::dpll::set_variable (12 samples, 0.21%)</title><rect x="49.7743%" y="181" width="0.2083%" height="15" fill="rgb(217,125,39)" fg:x="2867" fg:w="12"/><text x="50.0243%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (12 samples, 0.21%)</title><rect x="49.7743%" y="165" width="0.2083%" height="15" fill="rgb(235,36,10)" fg:x="2867" fg:w="12"/><text x="50.0243%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (12 samples, 0.21%)</title><rect x="49.7743%" y="149" width="0.2083%" height="15" fill="rgb(251,123,47)" fg:x="2867" fg:w="12"/><text x="50.0243%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy (12 samples, 0.21%)</title><rect x="49.7743%" y="133" width="0.2083%" height="15" fill="rgb(221,13,13)" fg:x="2867" fg:w="12"/><text x="50.0243%" y="143.50"></text></g><g><title>core::intrinsics::copy (12 samples, 0.21%)</title><rect x="49.7743%" y="117" width="0.2083%" height="15" fill="rgb(238,131,9)" fg:x="2867" fg:w="12"/><text x="50.0243%" y="127.50"></text></g><g><title>dpll::dpll::undo_assignment (12 samples, 0.21%)</title><rect x="49.7743%" y="101" width="0.2083%" height="15" fill="rgb(211,50,8)" fg:x="2867" fg:w="12"/><text x="50.0243%" y="111.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.26%)</title><rect x="57.8299%" y="149" width="0.2604%" height="15" fill="rgb(245,182,24)" fg:x="3331" fg:w="15"/><text x="58.0799%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (15 samples, 0.26%)</title><rect x="57.8299%" y="133" width="0.2604%" height="15" fill="rgb(242,14,37)" fg:x="3331" fg:w="15"/><text x="58.0799%" y="143.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (15 samples, 0.26%)</title><rect x="57.8299%" y="117" width="0.2604%" height="15" fill="rgb(246,228,12)" fg:x="3331" fg:w="15"/><text x="58.0799%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (15 samples, 0.26%)</title><rect x="57.8299%" y="101" width="0.2604%" height="15" fill="rgb(213,55,15)" fg:x="3331" fg:w="15"/><text x="58.0799%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.12%)</title><rect x="58.0903%" y="149" width="0.1215%" height="15" fill="rgb(209,9,3)" fg:x="3346" fg:w="7"/><text x="58.3403%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.12%)</title><rect x="58.0903%" y="133" width="0.1215%" height="15" fill="rgb(230,59,30)" fg:x="3346" fg:w="7"/><text x="58.3403%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.12%)</title><rect x="58.0903%" y="117" width="0.1215%" height="15" fill="rgb(209,121,21)" fg:x="3346" fg:w="7"/><text x="58.3403%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (24 samples, 0.42%)</title><rect x="58.2118%" y="149" width="0.4167%" height="15" fill="rgb(220,109,13)" fg:x="3353" fg:w="24"/><text x="58.4618%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (24 samples, 0.42%)</title><rect x="58.2118%" y="133" width="0.4167%" height="15" fill="rgb(232,18,1)" fg:x="3353" fg:w="24"/><text x="58.4618%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (24 samples, 0.42%)</title><rect x="58.2118%" y="117" width="0.4167%" height="15" fill="rgb(215,41,42)" fg:x="3353" fg:w="24"/><text x="58.4618%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (79 samples, 1.37%)</title><rect x="59.4965%" y="133" width="1.3715%" height="15" fill="rgb(224,123,36)" fg:x="3427" fg:w="79"/><text x="59.7465%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 2.29%)</title><rect x="58.6285%" y="149" width="2.2917%" height="15" fill="rgb(240,125,3)" fg:x="3377" fg:w="132"/><text x="58.8785%" y="159.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.05%)</title><rect x="60.8681%" y="133" width="0.0521%" height="15" fill="rgb(205,98,50)" fg:x="3506" fg:w="3"/><text x="61.1181%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.05%)</title><rect x="60.8681%" y="117" width="0.0521%" height="15" fill="rgb(205,185,37)" fg:x="3506" fg:w="3"/><text x="61.1181%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.05%)</title><rect x="60.8681%" y="101" width="0.0521%" height="15" fill="rgb(238,207,15)" fg:x="3506" fg:w="3"/><text x="61.1181%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (3 samples, 0.05%)</title><rect x="61.2153%" y="117" width="0.0521%" height="15" fill="rgb(213,199,42)" fg:x="3526" fg:w="3"/><text x="61.4653%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.05%)</title><rect x="61.2153%" y="101" width="0.0521%" height="15" fill="rgb(235,201,11)" fg:x="3526" fg:w="3"/><text x="61.4653%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (26 samples, 0.45%)</title><rect x="61.2153%" y="133" width="0.4514%" height="15" fill="rgb(207,46,11)" fg:x="3526" fg:w="26"/><text x="61.4653%" y="143.50"></text></g><g><title>core::ptr::write (23 samples, 0.40%)</title><rect x="61.2674%" y="117" width="0.3993%" height="15" fill="rgb(241,35,35)" fg:x="3529" fg:w="23"/><text x="61.5174%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (4 samples, 0.07%)</title><rect x="61.6667%" y="133" width="0.0694%" height="15" fill="rgb(243,32,47)" fg:x="3552" fg:w="4"/><text x="61.9167%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (4 samples, 0.07%)</title><rect x="61.6667%" y="117" width="0.0694%" height="15" fill="rgb(247,202,23)" fg:x="3552" fg:w="4"/><text x="61.9167%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (4 samples, 0.07%)</title><rect x="61.6667%" y="101" width="0.0694%" height="15" fill="rgb(219,102,11)" fg:x="3552" fg:w="4"/><text x="61.9167%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (13 samples, 0.23%)</title><rect x="61.7361%" y="101" width="0.2257%" height="15" fill="rgb(243,110,44)" fg:x="3556" fg:w="13"/><text x="61.9861%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (66 samples, 1.15%)</title><rect x="60.9201%" y="149" width="1.1458%" height="15" fill="rgb(222,74,54)" fg:x="3509" fg:w="66"/><text x="61.1701%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (19 samples, 0.33%)</title><rect x="61.7361%" y="133" width="0.3299%" height="15" fill="rgb(216,99,12)" fg:x="3556" fg:w="19"/><text x="61.9861%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (19 samples, 0.33%)</title><rect x="61.7361%" y="117" width="0.3299%" height="15" fill="rgb(226,22,26)" fg:x="3556" fg:w="19"/><text x="61.9861%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (6 samples, 0.10%)</title><rect x="61.9618%" y="101" width="0.1042%" height="15" fill="rgb(217,163,10)" fg:x="3569" fg:w="6"/><text x="62.2118%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.19%)</title><rect x="62.1354%" y="133" width="0.1910%" height="15" fill="rgb(213,25,53)" fg:x="3579" fg:w="11"/><text x="62.3854%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.19%)</title><rect x="62.1354%" y="117" width="0.1910%" height="15" fill="rgb(252,105,26)" fg:x="3579" fg:w="11"/><text x="62.3854%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.59%)</title><rect x="62.0660%" y="149" width="0.5903%" height="15" fill="rgb(220,39,43)" fg:x="3575" fg:w="34"/><text x="62.3160%" y="159.50"></text></g><g><title>core::ptr::write (19 samples, 0.33%)</title><rect x="62.3264%" y="133" width="0.3299%" height="15" fill="rgb(229,68,48)" fg:x="3590" fg:w="19"/><text x="62.5764%" y="143.50"></text></g><g><title>core::cmp::PartialOrd::le (40 samples, 0.69%)</title><rect x="62.6562%" y="149" width="0.6944%" height="15" fill="rgb(252,8,32)" fg:x="3609" fg:w="40"/><text x="62.9062%" y="159.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (22 samples, 0.38%)</title><rect x="62.9688%" y="133" width="0.3819%" height="15" fill="rgb(223,20,43)" fg:x="3627" fg:w="22"/><text x="63.2188%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.38%)</title><rect x="62.9688%" y="117" width="0.3819%" height="15" fill="rgb(229,81,49)" fg:x="3627" fg:w="22"/><text x="63.2188%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.28%)</title><rect x="63.9583%" y="133" width="0.2778%" height="15" fill="rgb(236,28,36)" fg:x="3684" fg:w="16"/><text x="64.2083%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (8 samples, 0.14%)</title><rect x="64.0972%" y="117" width="0.1389%" height="15" fill="rgb(249,185,26)" fg:x="3692" fg:w="8"/><text x="64.3472%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.14%)</title><rect x="64.0972%" y="101" width="0.1389%" height="15" fill="rgb(249,174,33)" fg:x="3692" fg:w="8"/><text x="64.3472%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.17%)</title><rect x="64.7569%" y="117" width="0.1736%" height="15" fill="rgb(233,201,37)" fg:x="3730" fg:w="10"/><text x="65.0069%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.17%)</title><rect x="64.7569%" y="101" width="0.1736%" height="15" fill="rgb(221,78,26)" fg:x="3730" fg:w="10"/><text x="65.0069%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.16%)</title><rect x="65.2778%" y="101" width="0.1562%" height="15" fill="rgb(250,127,30)" fg:x="3760" fg:w="9"/><text x="65.5278%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.16%)</title><rect x="65.2778%" y="85" width="0.1562%" height="15" fill="rgb(230,49,44)" fg:x="3760" fg:w="9"/><text x="65.5278%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.16%)</title><rect x="65.2778%" y="69" width="0.1562%" height="15" fill="rgb(229,67,23)" fg:x="3760" fg:w="9"/><text x="65.5278%" y="79.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (59 samples, 1.02%)</title><rect x="65.4340%" y="101" width="1.0243%" height="15" fill="rgb(249,83,47)" fg:x="3769" fg:w="59"/><text x="65.6840%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (144 samples, 2.50%)</title><rect x="64.2361%" y="133" width="2.5000%" height="15" fill="rgb(215,43,3)" fg:x="3700" fg:w="144"/><text x="64.4861%" y="143.50">&lt;c..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (104 samples, 1.81%)</title><rect x="64.9306%" y="117" width="1.8056%" height="15" fill="rgb(238,154,13)" fg:x="3740" fg:w="104"/><text x="65.1806%" y="127.50">d..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (16 samples, 0.28%)</title><rect x="66.4583%" y="101" width="0.2778%" height="15" fill="rgb(219,56,2)" fg:x="3828" fg:w="16"/><text x="66.7083%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (50 samples, 0.87%)</title><rect x="66.7361%" y="133" width="0.8681%" height="15" fill="rgb(233,0,4)" fg:x="3844" fg:w="50"/><text x="66.9861%" y="143.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (42 samples, 0.73%)</title><rect x="66.8750%" y="117" width="0.7292%" height="15" fill="rgb(235,30,7)" fg:x="3852" fg:w="42"/><text x="67.1250%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (42 samples, 0.73%)</title><rect x="66.8750%" y="101" width="0.7292%" height="15" fill="rgb(250,79,13)" fg:x="3852" fg:w="42"/><text x="67.1250%" y="111.50"></text></g><g><title>dpll::dpll::find_unit (261 samples, 4.53%)</title><rect x="63.3507%" y="149" width="4.5312%" height="15" fill="rgb(211,146,34)" fg:x="3649" fg:w="261"/><text x="63.6007%" y="159.50">dpll:..</text></g><g><title>log::max_level (16 samples, 0.28%)</title><rect x="67.6042%" y="133" width="0.2778%" height="15" fill="rgb(228,22,38)" fg:x="3894" fg:w="16"/><text x="67.8542%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.28%)</title><rect x="67.6042%" y="117" width="0.2778%" height="15" fill="rgb(235,168,5)" fg:x="3894" fg:w="16"/><text x="67.8542%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.09%)</title><rect x="67.7951%" y="101" width="0.0868%" height="15" fill="rgb(221,155,16)" fg:x="3905" fg:w="5"/><text x="68.0451%" y="111.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (7 samples, 0.12%)</title><rect x="67.8819%" y="149" width="0.1215%" height="15" fill="rgb(215,215,53)" fg:x="3910" fg:w="7"/><text x="68.1319%" y="159.50"></text></g><g><title>dpll::dpll::set_variable_false (1,047 samples, 18.18%)</title><rect x="49.9826%" y="181" width="18.1771%" height="15" fill="rgb(223,4,10)" fg:x="2879" fg:w="1047"/><text x="50.2326%" y="191.50">dpll::dpll::set_variable_fal..</text></g><g><title>dpll::dpll::set_variable (1,042 samples, 18.09%)</title><rect x="50.0694%" y="165" width="18.0903%" height="15" fill="rgb(234,103,6)" fg:x="2884" fg:w="1042"/><text x="50.3194%" y="175.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (9 samples, 0.16%)</title><rect x="68.0035%" y="149" width="0.1562%" height="15" fill="rgb(227,97,0)" fg:x="3917" fg:w="9"/><text x="68.2535%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.16%)</title><rect x="68.0035%" y="133" width="0.1562%" height="15" fill="rgb(234,150,53)" fg:x="3917" fg:w="9"/><text x="68.2535%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.07%)</title><rect x="68.0903%" y="117" width="0.0694%" height="15" fill="rgb(228,201,54)" fg:x="3922" fg:w="4"/><text x="68.3403%" y="127.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.21%)</title><rect x="81.2153%" y="149" width="0.2083%" height="15" fill="rgb(222,22,37)" fg:x="4678" fg:w="12"/><text x="81.4653%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (12 samples, 0.21%)</title><rect x="81.2153%" y="133" width="0.2083%" height="15" fill="rgb(237,53,32)" fg:x="4678" fg:w="12"/><text x="81.4653%" y="143.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (12 samples, 0.21%)</title><rect x="81.2153%" y="117" width="0.2083%" height="15" fill="rgb(233,25,53)" fg:x="4678" fg:w="12"/><text x="81.4653%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.21%)</title><rect x="81.2153%" y="101" width="0.2083%" height="15" fill="rgb(210,40,34)" fg:x="4678" fg:w="12"/><text x="81.4653%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.17%)</title><rect x="81.4236%" y="149" width="0.1736%" height="15" fill="rgb(241,220,44)" fg:x="4690" fg:w="10"/><text x="81.6736%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10 samples, 0.17%)</title><rect x="81.4236%" y="133" width="0.1736%" height="15" fill="rgb(235,28,35)" fg:x="4690" fg:w="10"/><text x="81.6736%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.17%)</title><rect x="81.4236%" y="117" width="0.1736%" height="15" fill="rgb(210,56,17)" fg:x="4690" fg:w="10"/><text x="81.6736%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (30 samples, 0.52%)</title><rect x="81.5972%" y="149" width="0.5208%" height="15" fill="rgb(224,130,29)" fg:x="4700" fg:w="30"/><text x="81.8472%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (30 samples, 0.52%)</title><rect x="81.5972%" y="133" width="0.5208%" height="15" fill="rgb(235,212,8)" fg:x="4700" fg:w="30"/><text x="81.8472%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (30 samples, 0.52%)</title><rect x="81.5972%" y="117" width="0.5208%" height="15" fill="rgb(223,33,50)" fg:x="4700" fg:w="30"/><text x="81.8472%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (146 samples, 2.53%)</title><rect x="83.1424%" y="133" width="2.5347%" height="15" fill="rgb(219,149,13)" fg:x="4789" fg:w="146"/><text x="83.3924%" y="143.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 3.59%)</title><rect x="82.1181%" y="149" width="3.5938%" height="15" fill="rgb(250,156,29)" fg:x="4730" fg:w="207"/><text x="82.3681%" y="159.50">&lt;cor..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.03%)</title><rect x="85.6771%" y="133" width="0.0347%" height="15" fill="rgb(216,193,19)" fg:x="4935" fg:w="2"/><text x="85.9271%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.03%)</title><rect x="85.6771%" y="117" width="0.0347%" height="15" fill="rgb(216,135,14)" fg:x="4935" fg:w="2"/><text x="85.9271%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.03%)</title><rect x="85.6771%" y="101" width="0.0347%" height="15" fill="rgb(241,47,5)" fg:x="4935" fg:w="2"/><text x="85.9271%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="86.1806%" y="117" width="0.0347%" height="15" fill="rgb(233,42,35)" fg:x="4964" fg:w="2"/><text x="86.4306%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="86.1806%" y="101" width="0.0347%" height="15" fill="rgb(231,13,6)" fg:x="4964" fg:w="2"/><text x="86.4306%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (41 samples, 0.71%)</title><rect x="86.1806%" y="133" width="0.7118%" height="15" fill="rgb(207,181,40)" fg:x="4964" fg:w="41"/><text x="86.4306%" y="143.50"></text></g><g><title>core::ptr::write (39 samples, 0.68%)</title><rect x="86.2153%" y="117" width="0.6771%" height="15" fill="rgb(254,173,49)" fg:x="4966" fg:w="39"/><text x="86.4653%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (5 samples, 0.09%)</title><rect x="86.8924%" y="133" width="0.0868%" height="15" fill="rgb(221,1,38)" fg:x="5005" fg:w="5"/><text x="87.1424%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (5 samples, 0.09%)</title><rect x="86.8924%" y="117" width="0.0868%" height="15" fill="rgb(206,124,46)" fg:x="5005" fg:w="5"/><text x="87.1424%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (5 samples, 0.09%)</title><rect x="86.8924%" y="101" width="0.0868%" height="15" fill="rgb(249,21,11)" fg:x="5005" fg:w="5"/><text x="87.1424%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (24 samples, 0.42%)</title><rect x="86.9792%" y="101" width="0.4167%" height="15" fill="rgb(222,201,40)" fg:x="5010" fg:w="24"/><text x="87.2292%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (104 samples, 1.81%)</title><rect x="85.7118%" y="149" width="1.8056%" height="15" fill="rgb(235,61,29)" fg:x="4937" fg:w="104"/><text x="85.9618%" y="159.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (31 samples, 0.54%)</title><rect x="86.9792%" y="133" width="0.5382%" height="15" fill="rgb(219,207,3)" fg:x="5010" fg:w="31"/><text x="87.2292%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (31 samples, 0.54%)</title><rect x="86.9792%" y="117" width="0.5382%" height="15" fill="rgb(222,56,46)" fg:x="5010" fg:w="31"/><text x="87.2292%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (7 samples, 0.12%)</title><rect x="87.3958%" y="101" width="0.1215%" height="15" fill="rgb(239,76,54)" fg:x="5034" fg:w="7"/><text x="87.6458%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38 samples, 0.66%)</title><rect x="87.5174%" y="149" width="0.6597%" height="15" fill="rgb(231,124,27)" fg:x="5041" fg:w="38"/><text x="87.7674%" y="159.50"></text></g><g><title>core::ptr::write (29 samples, 0.50%)</title><rect x="87.6736%" y="133" width="0.5035%" height="15" fill="rgb(249,195,6)" fg:x="5050" fg:w="29"/><text x="87.9236%" y="143.50"></text></g><g><title>core::cmp::PartialOrd::le (71 samples, 1.23%)</title><rect x="88.1771%" y="149" width="1.2326%" height="15" fill="rgb(237,174,47)" fg:x="5079" fg:w="71"/><text x="88.4271%" y="159.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (41 samples, 0.71%)</title><rect x="88.6979%" y="133" width="0.7118%" height="15" fill="rgb(206,201,31)" fg:x="5109" fg:w="41"/><text x="88.9479%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (41 samples, 0.71%)</title><rect x="88.6979%" y="117" width="0.7118%" height="15" fill="rgb(231,57,52)" fg:x="5109" fg:w="41"/><text x="88.9479%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.26%)</title><rect x="90.5035%" y="133" width="0.2604%" height="15" fill="rgb(248,177,22)" fg:x="5213" fg:w="15"/><text x="90.7535%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6 samples, 0.10%)</title><rect x="90.6597%" y="117" width="0.1042%" height="15" fill="rgb(215,211,37)" fg:x="5222" fg:w="6"/><text x="90.9097%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.10%)</title><rect x="90.6597%" y="101" width="0.1042%" height="15" fill="rgb(241,128,51)" fg:x="5222" fg:w="6"/><text x="90.9097%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.40%)</title><rect x="91.7535%" y="117" width="0.3993%" height="15" fill="rgb(227,165,31)" fg:x="5285" fg:w="23"/><text x="92.0035%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (23 samples, 0.40%)</title><rect x="91.7535%" y="101" width="0.3993%" height="15" fill="rgb(228,167,24)" fg:x="5285" fg:w="23"/><text x="92.0035%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.12%)</title><rect x="92.7951%" y="101" width="0.1215%" height="15" fill="rgb(228,143,12)" fg:x="5345" fg:w="7"/><text x="93.0451%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.12%)</title><rect x="92.7951%" y="85" width="0.1215%" height="15" fill="rgb(249,149,8)" fg:x="5345" fg:w="7"/><text x="93.0451%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.12%)</title><rect x="92.7951%" y="69" width="0.1215%" height="15" fill="rgb(243,35,44)" fg:x="5345" fg:w="7"/><text x="93.0451%" y="79.50"></text></g><g><title>&lt;dpll::schemas::Value as core::cmp::PartialEq&gt;::eq (84 samples, 1.46%)</title><rect x="92.9167%" y="101" width="1.4583%" height="15" fill="rgb(246,89,9)" fg:x="5352" fg:w="84"/><text x="93.1667%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (236 samples, 4.10%)</title><rect x="90.7639%" y="133" width="4.0972%" height="15" fill="rgb(233,213,13)" fg:x="5228" fg:w="236"/><text x="91.0139%" y="143.50">&lt;cor..</text></g><g><title>dpll::dpll::find_unit::_{{closure}} (156 samples, 2.71%)</title><rect x="92.1528%" y="117" width="2.7083%" height="15" fill="rgb(233,141,41)" fg:x="5308" fg:w="156"/><text x="92.4028%" y="127.50">dp..</text></g><g><title>core::num::&lt;impl i16&gt;::abs (28 samples, 0.49%)</title><rect x="94.3750%" y="101" width="0.4861%" height="15" fill="rgb(239,167,4)" fg:x="5436" fg:w="28"/><text x="94.6250%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (76 samples, 1.32%)</title><rect x="94.8611%" y="133" width="1.3194%" height="15" fill="rgb(209,217,16)" fg:x="5464" fg:w="76"/><text x="95.1111%" y="143.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (65 samples, 1.13%)</title><rect x="95.0521%" y="117" width="1.1285%" height="15" fill="rgb(219,88,35)" fg:x="5475" fg:w="65"/><text x="95.3021%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (65 samples, 1.13%)</title><rect x="95.0521%" y="101" width="1.1285%" height="15" fill="rgb(220,193,23)" fg:x="5475" fg:w="65"/><text x="95.3021%" y="111.50"></text></g><g><title>dpll::dpll::find_unit (413 samples, 7.17%)</title><rect x="89.4097%" y="149" width="7.1701%" height="15" fill="rgb(230,90,52)" fg:x="5150" fg:w="413"/><text x="89.6597%" y="159.50">dpll::dpll..</text></g><g><title>log::max_level (23 samples, 0.40%)</title><rect x="96.1806%" y="133" width="0.3993%" height="15" fill="rgb(252,106,19)" fg:x="5540" fg:w="23"/><text x="96.4306%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.40%)</title><rect x="96.1806%" y="117" width="0.3993%" height="15" fill="rgb(206,74,20)" fg:x="5540" fg:w="23"/><text x="96.4306%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.10%)</title><rect x="96.4757%" y="101" width="0.1042%" height="15" fill="rgb(230,138,44)" fg:x="5557" fg:w="6"/><text x="96.7257%" y="111.50"></text></g><g><title>dpll::dpll::set_variable_and_return_index (20 samples, 0.35%)</title><rect x="96.5799%" y="149" width="0.3472%" height="15" fill="rgb(235,182,43)" fg:x="5563" fg:w="20"/><text x="96.8299%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.21%)</title><rect x="96.7188%" y="133" width="0.2083%" height="15" fill="rgb(242,16,51)" fg:x="5571" fg:w="12"/><text x="96.9688%" y="143.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (12 samples, 0.21%)</title><rect x="96.7188%" y="117" width="0.2083%" height="15" fill="rgb(248,9,4)" fg:x="5571" fg:w="12"/><text x="96.9688%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.21%)</title><rect x="96.7188%" y="101" width="0.2083%" height="15" fill="rgb(210,31,22)" fg:x="5571" fg:w="12"/><text x="96.9688%" y="111.50"></text></g><g><title>dpll::dpll::set_variable_true (1,680 samples, 29.17%)</title><rect x="68.1597%" y="181" width="29.1667%" height="15" fill="rgb(239,54,39)" fg:x="3926" fg:w="1680"/><text x="68.4097%" y="191.50">dpll::dpll::set_variable_true</text></g><g><title>dpll::dpll::set_variable (1,658 samples, 28.78%)</title><rect x="68.5417%" y="165" width="28.7847%" height="15" fill="rgb(230,99,41)" fg:x="3948" fg:w="1658"/><text x="68.7917%" y="175.50">dpll::dpll::set_variable</text></g><g><title>log::max_level (23 samples, 0.40%)</title><rect x="96.9271%" y="149" width="0.3993%" height="15" fill="rgb(253,106,12)" fg:x="5583" fg:w="23"/><text x="97.1771%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.40%)</title><rect x="96.9271%" y="133" width="0.3993%" height="15" fill="rgb(213,46,41)" fg:x="5583" fg:w="23"/><text x="97.1771%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.19%)</title><rect x="97.1354%" y="117" width="0.1910%" height="15" fill="rgb(215,133,35)" fg:x="5595" fg:w="11"/><text x="97.3854%" y="127.50"></text></g><g><title>_start (5,369 samples, 93.21%)</title><rect x="4.2535%" y="341" width="93.2118%" height="15" fill="rgb(213,28,5)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="351.50">_start</text></g><g><title>__libc_start_main (5,369 samples, 93.21%)</title><rect x="4.2535%" y="325" width="93.2118%" height="15" fill="rgb(215,77,49)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="335.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,369 samples, 93.21%)</title><rect x="4.2535%" y="309" width="93.2118%" height="15" fill="rgb(248,100,22)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="319.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (5,369 samples, 93.21%)</title><rect x="4.2535%" y="293" width="93.2118%" height="15" fill="rgb(208,67,9)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="303.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (5,369 samples, 93.21%)</title><rect x="4.2535%" y="277" width="93.2118%" height="15" fill="rgb(219,133,21)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="287.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,369 samples, 93.21%)</title><rect x="4.2535%" y="261" width="93.2118%" height="15" fill="rgb(246,46,29)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="271.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,369 samples, 93.21%)</title><rect x="4.2535%" y="245" width="93.2118%" height="15" fill="rgb(246,185,52)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="255.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,369 samples, 93.21%)</title><rect x="4.2535%" y="229" width="93.2118%" height="15" fill="rgb(252,136,11)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="239.50">core::ops::function::FnOnce::call_once</text></g><g><title>dpll::main (5,369 samples, 93.21%)</title><rect x="4.2535%" y="213" width="93.2118%" height="15" fill="rgb(219,138,53)" fg:x="245" fg:w="5369"/><text x="4.5035%" y="223.50">dpll::main</text></g><g><title>dpll::dpll::dpll (5,368 samples, 93.19%)</title><rect x="4.2708%" y="197" width="93.1944%" height="15" fill="rgb(211,51,23)" fg:x="246" fg:w="5368"/><text x="4.5208%" y="207.50">dpll::dpll::dpll</text></g><g><title>log::max_level (8 samples, 0.14%)</title><rect x="97.3264%" y="181" width="0.1389%" height="15" fill="rgb(247,221,28)" fg:x="5606" fg:w="8"/><text x="97.5764%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (8 samples, 0.14%)</title><rect x="97.3264%" y="165" width="0.1389%" height="15" fill="rgb(251,222,45)" fg:x="5606" fg:w="8"/><text x="97.5764%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.14%)</title><rect x="97.3264%" y="149" width="0.1389%" height="15" fill="rgb(217,162,53)" fg:x="5606" fg:w="8"/><text x="97.5764%" y="159.50"></text></g><g><title>dpll::dpll::backtrack (28 samples, 0.49%)</title><rect x="97.4653%" y="325" width="0.4861%" height="15" fill="rgb(229,93,14)" fg:x="5614" fg:w="28"/><text x="97.7153%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.09%)</title><rect x="97.8646%" y="309" width="0.0868%" height="15" fill="rgb(209,67,49)" fg:x="5637" fg:w="5"/><text x="98.1146%" y="319.50"></text></g><g><title>dpll::dpll::find_unit (34 samples, 0.59%)</title><rect x="97.9514%" y="325" width="0.5903%" height="15" fill="rgb(213,87,29)" fg:x="5642" fg:w="34"/><text x="98.2014%" y="335.50"></text></g><g><title>all (5,760 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="5760"/><text x="0.2500%" y="383.50"></text></g><g><title>dpll (5,760 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="5760"/><text x="0.2500%" y="367.50">dpll</text></g><g><title>log::STATE (146 samples, 2.53%)</title><rect x="97.4653%" y="341" width="2.5347%" height="15" fill="rgb(221,220,41)" fg:x="5614" fg:w="146"/><text x="97.7153%" y="351.50">lo..</text></g><g><title>dpll::dpll::set_variable (84 samples, 1.46%)</title><rect x="98.5417%" y="325" width="1.4583%" height="15" fill="rgb(218,133,21)" fg:x="5676" fg:w="84"/><text x="98.7917%" y="335.50"></text></g></svg></svg>